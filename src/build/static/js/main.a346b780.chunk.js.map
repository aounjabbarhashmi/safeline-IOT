{"version":3,"sources":["assets/img/background-card-reports.png","components/Icons/Icons.js","contexts/SidebarContext.js","assets/svg/iot-logo.svg","assets/svg/flag.svg","components/Sidebar/Sidebar.js","views/Pages/ManDashboard/components/Navbar/Navbar.js","views/Pages/ManDashboard/components/Footer/Footer.js","services/request.js","services/sensor.js","variables/AreaData.js","views/Pages/ManDashboard/components/BlueGraph/BlueGraph.js","views/Pages/ManDashboard/components/ReportTable/ReportTable.js","views/Pages/ManDashboard/components/NotificationTable/NotificationTable.js","views/Pages/ManDashboard/components/Status/Status.js","assets/svg/signal.svg","assets/svg/alarm.svg","assets/svg/tick.svg","assets/svg/warning.svg","views/Pages/ManDashboard/components/Graph/Graph.js","components/Card/Card.js","components/Card/CardBody.js","assets/svg/Battery.svg","components/Charts/DonutChart.js","variables/DonutData.js","views/Pages/ManDashboard/components/Gauge/Gauge.js","views/Pages/ManDashboard/components/DonutCharts/Donut.js","views/Pages/ManDashboard/components/GridStack/Widget.js","views/Pages/ManDashboard/components/GridStack/AddList.js","views/Pages/ManDashboard/components/GridStack/Topbar.js","views/Pages/ManDashboard/components/GridStack/GridStackComponent.js","views/Pages/ManDashboarddd/components/ReportTable/ReportTable.js","views/Pages/ManDashboarddd/components/NotificationTable/NotificationTable.js","views/Pages/ManDashboarddd/components/Navbar/Navbar.js","views/Pages/ManDashboarddd/components/Status/Status.js","views/Pages/ManDashboarddd/components/Gauge/Gauge.js","views/Pages/ManDashboarddd/components/DonutCharts/Donut.js","views/Pages/ManDashboarddd/components/GridStack/Widget.js","views/Pages/ManDashboarddd/components/GridStack/AddList.js","views/Pages/ManDashboarddd/components/GridStack/Topbar.js","views/Pages/ManDashboarddd/components/GridStack/GridStackComponent.js","routes.js","views/Pages/ManDashboarddd/index.js","views/Pages/ManDashboard/index.js","views/Pages/GraphPage/index.js","theme/styles.js","theme/foundations/breakpoints.js","theme/components/button.js","theme/additions/card/Card.js","theme/additions/card/CardBody.js","theme/additions/card/CardFooter.js","theme/additions/card/CardHeader.js","theme/additions/layout/MainPanel.js","theme/additions/layout/PanelContent.js","theme/additions/layout/PanelContainer.js","theme/theme.js","theme/components/badge.js","theme/components/link.js","theme/components/drawer.js","components/Globe/Globe.js","components/Layout/MainPanel.js","components/Layout/PanelContainer.js","components/Layout/PanelContent.js","assets/img/avatars/avatar1.png","assets/img/avatars/avatar2.png","assets/img/avatars/avatar3.png","layouts/Admin.js","app.js","index.js"],"names":["createIcon","displayName","viewBox","path","_jsxs","children","_jsx","d","fill","height","width","xmlns","version","id","stroke","transform","rx","x1","y1","x2","y2","gradientUnits","offset","HomeIcon","cx","cy","r","SidebarContext","createContext","Sidebar","HomeOutlined","FolderOutlined","CopyOutlined","MenuOutlined","Footer","isDarkMode","useColorMode","colorMode","footerStyle","color","backgroundColor","padding","marginTop","_Fragment","className","style","request","axios","create","baseURL","timeout","interceptors","use","config","_JSON$parse","token","JSON","parse","localStorage","getItem","headers","Authorization","concat","error","Promise","reject","response","_error$response","data","status","console","notification","message","getSensorsData","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","urlParams","systemId","_res","res","wrap","_context","prev","next","URLSearchParams","window","location","search","get","sent","abrupt","stop","apply","arguments","getSensorsDataHCCAP","_ref3","_callee2","_ref2","date","day","now_utc","_res2","_context2","toISOString","log","_x","getSensorDataById","_ref4","_callee3","sensorId","sensorName","startDate","endedDate","_context3","_x2","_x3","_x4","_x5","series","_data$data","_data$yaxis","_data$yaxis2","yoLo","map","item","index","Date","getTime","Number","name","yaxis","min","max","options","chart","type","stacked","zoom","enabled","autoScaleYaxis","toolbar","autoSelected","dataLabels","markers","size","title","text","align","gradient","shadeIntensity","inverseColors","opacityFrom","opacityTo","stops","show","labels","formatter","val","colors","xaxis","timezone","format","tooltip","shared","theme","x","y","BlueGraph","sensorsData","loading","Skeleton","active","paragraph","rows","ReactApexChart","ReportTable","_useState","useState","_useState2","_slicedToArray","setLoading","_useState3","_useState4","hccpColumns","setHccpColumns","_useState5","_useState6","hccpData","setHccpData","useEffect","then","_res$data","_res$data$","columm","_toConsumableArray","columns","dataIndex","shift","catch","err","Table","dataSource","key","render","_","Severity","tag","length","Tag","toUpperCase","Raised","Device","NotificationTable","Status","Graph","Card","props","variant","rest","_objectWithoutProperties","_excluded","styles","useStyleConfig","Box","_objectSpread","__css","CardBody","React","Component","calculatePercentage","minValue","maxValue","currentValue","toFixed","getTimeDifference","currentTime","previousTime","timeDifference","UTC","getUTCFullYear","getUTCMonth","getUTCDate","getUTCHours","getUTCMinutes","getUTCSeconds","seconds","Math","floor","minutes","hours","days","Gauge","percentage","percen","display","flexDirection","alignItems","GaugeChart","nrOfLevels","arcWidth","percent","needleColor","Donut","sensorData","setSensorData","loadingDonut","setLoadingDonut","sensorListing","_item$temperature","temperature","interval","setInterval","clearInterval","hour","useColorModeValue","navi","useNavigate","Flex","flexWrap","gap","mb","w","base","sm","md","lg","cursor","h","Divider","onClick","Text","humidity","direction","readingDateTime","src","Battery","alt","battery","useStyles","makeStyles","root","background","header","spacer","flexGrow","body","widgetNames","a","b","c","Widget","onRemoveItem","ComponentList","classes","borderWidth","borderRadius","p","boxShadow","spacing","fontSize","justify","IconButton","colorScheme","icon","DeleteIcon","widgetIcons","Icon","as","HiDocumentReport","boxSize","HiChartBar","HiBell","AddList","onAddItem","handleAddWidget","widgetId","marginRight","justifyContent","TopBar","onLayoutSave","items","originalItems","FaSave","withSize","refreshMode","refreshRate","isOn","componentList","setItems","ls","e","getFromLS","i","layouts","setLayouts","itemId","filter","value","setItem","stringify","_defineProperty","ResponsiveGridLayout","breakpoints","xs","xxs","cols","rowHeight","onLayoutChange","allLayouts","Infinity","uniqueDates","Set","flatMap","sensor","dates","uniqueIntervals","intervals","colSpan","_sensor$dates$find","_sensor$dates$find$in","find","textColor","bgColor","statusCardStyle","generateGradientColor","startColor","endColor","steps","stepFactor","interpolatedArray","interpolatedColor","interpolateColor","push","color1","color2","factor","r1","parseInt","substring","g1","b1","r2","g2","b2","round","toString","padStart","g","safeCurrentValue","redToYellow","yellowToGreen","greenToYellow","reverse","yellowToRed","colorsArray","getNeedleColor","minHeight","isNaN","marginLeft","batteryValue","Button","dashRoutes","role","component","defaultAlgorithm","darkAlgorithm","themeClassName","Day","setDay","_useColorMode","toggleColorMode","conditionsTextColor","_useState7","_useState8","setStartDate","setSearchParams","params","url","URL","href","hasOwnProperty","searchParams","set","history","replaceState","themeColor","removeItem","_step","_iterator","_createForOfIteratorHelper","keys","s","n","done","f","_location3","_location3$search","split","_location4","_location4$search","_location4$search$spl","decodeURIComponent","signal","alarm","warning","tick","ConfigProvider","algorithm","marginBottom","onSubmit","preventDefault","htmlFor","DatePicker","selected","onChange","_location","_location$search","_location2","_location2$search","_location2$search$spl","dateFormat","placeholderText","Select","target","layout","setIsDarkMode","setIsOn","Switch","previousValue","isChecked","FaPencilAlt","leftIcon","SettingsIcon","GridStackComponent","_objectDestructuringEmpty","endDate","setEndDate","CustomInput","placeholder","FaCalendar","useLocation","setSensorsData","_useState9","_useState10","isSensorId","setIsSensorId","_location$search2","_location$search2$spl","utcstartDate","utcEndDate","storedSystemId","storedThemeColor","fontWeight","customInput","globalStyles","gray","teal","global","bg","document","documentElement","mode","fontFamily","html","createBreakpoints","xl","buttonStyles","components","variants","_hover","_active","borderColor","_focus","baseStyle","CardComponent","position","minWidth","wordWrap","backgroundClip","panel","defaultProps","CardBodyComponent","CardFooterComponent","CardFooter","CardHeaderComponent","CardHeader","MainPanelComponent","MainPanel","float","maxWidth","transition","transitionDuration","transitionProperty","transitionTimingFunction","main","rtl","PanelContentComponent","PanelContent","ms","me","ps","pe","PanelContainerComponent","PanelContainer","extendTheme","Badge","sizes","textTransform","Link","decoration","textDecoration","Drawer","placement","Globe","canvasStyle","globeRef","useRef","canvasRef","container","current","canvas","globeRadius","globeWidth","globeHeight","convertFlatCoordsToSphereCoords","latitude","longitude","PI","radius","cos","sin","z","gl","getContext","WebGLRenderingContext","hasWebGL","fetch","json","points","_container$getBoundin","getBoundingClientRect","scene","THREE","camera","renderer","antialias","setSize","mergedGeometry","pointGeometry","pointMaterial","point","_convertFlatCoordsToS","translate","merge","globeShape","add","classList","orbitControls","OrbitControls","enableKeys","enablePan","enableZoom","enableDamping","enableRotate","autoRotate","animate","update","requestAnimationFrame","makeMagic","createGlobe","ref","outline","Dashboard","Object","assign","toggleSidebar","setToggleSidebar","sidebarWidth","setSidebarWidth","mainPanel","createRef","_useDisclosure","useDisclosure","isOpen","onOpen","onClose","dir","ChakraProvider","resetCss","overflow","Provider","pathname","Routes","getRoutes","routes","prop","role_id","Route","element","collapse","category","AppRouter","AdminLayout","require","ReactDOM","BrowserRouter","DndProvider","backend","HTML5Backend","getElementById"],"mappings":"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","file":"static/js/main.a346b780.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/background-card-reports.d60a92c0.png\";","import { Icon, createIcon } from \"@chakra-ui/icons\";\n\nexport const AdobexdLogo = createIcon({\n  displayName: \"AdobexdLogo\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g clip-path='url(#clip0)'>\n      <path\n        d='M4.042 0h12.916A3.539 3.539 0 0120.5 3.542v12.416a3.539 3.539 0 01-3.542 3.542H4.042A3.539 3.539 0 01.5 15.958V3.542A3.539 3.539 0 014.042 0z'\n        fill='#470137'\n      />\n      <path\n        d='M11.017 5.124l-2.5 4.125 2.666 4.375a.143.143 0 01.017.1c-.008.034-.042.009-.092.017H9.2c-.133 0-.225-.008-.283-.092-.175-.35-.359-.691-.534-1.041a33.608 33.608 0 00-.566-1.05c-.2-.359-.4-.717-.6-1.084H7.2c-.175.359-.367.717-.558 1.075-.192.359-.384.717-.567 1.067-.192.35-.383.708-.575 1.05-.033.083-.1.092-.192.092H3.475c-.033 0-.058.016-.058-.025a.116.116 0 01.016-.092l2.592-4.25L3.5 5.116c-.025-.033-.033-.067-.017-.083.017-.025.05-.034.084-.034h1.891c.042 0 .084.009.117.017a.236.236 0 01.083.075c.159.358.342.717.534 1.075.2.358.391.708.6 1.058.2.35.383.7.558 1.059h.017c.175-.367.358-.725.541-1.075.184-.35.375-.7.567-1.05.192-.35.375-.709.558-1.05.009-.034.025-.067.05-.084a.159.159 0 01.109-.016h1.758a.077.077 0 01.091.058c.009.008-.008.042-.024.058zM14.866 13.917a4.144 4.144 0 01-1.791-.375 2.906 2.906 0 01-1.259-1.134c-.308-.508-.458-1.141-.458-1.9a3.423 3.423 0 011.783-3.05c.584-.325 1.284-.483 2.109-.483.041 0 .1 0 .175.008.075.009.158.009.258.017V4.367c0-.059.025-.092.083-.092h1.692c.042-.008.075.025.083.058v7.95c0 .15.009.317.017.5.017.175.025.342.033.484 0 .058-.025.108-.083.133a6.365 6.365 0 01-1.358.4 7.35 7.35 0 01-1.284.117zm.817-1.667V8.583c-.075-.016-.15-.033-.225-.041-.092-.009-.183-.017-.275-.017-.325 0-.65.067-.942.217-.283.141-.525.35-.708.616-.183.267-.275.625-.275 1.059-.008.291.042.583.142.858.083.225.208.425.375.592.158.15.35.266.566.333.225.075.459.108.692.108.125 0 .242-.008.35-.016a.73.73 0 00.3-.042z'\n        fill='#FF61F6'\n      />\n    </g>\n  ),\n});\n\nexport const UserLogo = () => (\n  <Icon color={\"teal.500\"} viewBox='0 0 500 500'>\n    <path d='M256 256c52.805 0 96-43.201 96-96s-43.195-96-96-96-96 43.201-96 96 43.195 96 96 96zm0 48c-63.598 0-192 32.402-192 96v48h384v-48c0-63.598-128.402-96-192-96z' />\n  </Icon>\n);\n\nexport const AtlassianLogo = createIcon({\n  displayName: \"AtlassianLogo\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g>\n      <path\n        d='M6.427 9.239a.57.57 0 00-.798-.108.591.591 0 00-.167.209l-4.9 9.803a.586.586 0 00.524.847h6.827a.562.562 0 00.523-.324c1.474-3.043.58-7.67-2.01-10.427z'\n        fill='#2684FF'\n      />\n      <path\n        d='M10.028.318a12.932 12.932 0 00-.755 12.765l3.292 6.583a.586.586 0 00.523.324h6.826a.583.583 0 00.586-.585c0-.091-.02-.18-.06-.262L11.024.315a.552.552 0 00-.997 0v.003z'\n        fill='#2684FF'\n      />\n    </g>\n  ),\n});\n\nexport const CartIcon = createIcon({\n  displayName: \"CartIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <path\n      fill='currentColor'\n      d='M7.984 19.937a1.406 1.406 0 100-2.812 1.406 1.406 0 000 2.812zM17.828 19.937a1.406 1.406 0 100-2.812 1.406 1.406 0 000 2.812zM20.324 5.558a1.051 1.051 0 00-.815-.386H6.134l-.27-1.528a.703.703 0 00-.692-.581H2.359a.703.703 0 000 1.406h2.223L6.59 15.841a.703.703 0 00.692.581h11.25a.703.703 0 100-1.406H7.871l-.248-1.406h10.62a1.057 1.057 0 001.035-.848l1.266-6.328a1.055 1.055 0 00-.22-.876z'\n    />\n  ),\n});\n\nexport const ClockIcon = createIcon({\n  displayName: \"ClockIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g>\n      <g>\n        <rect fill='none' height='24' width='24' />\n      </g>\n      <g>\n        <g>\n          <g>\n            <path\n              fill='currentColor'\n              d='M12,2C6.5,2,2,6.5,2,12s4.5,10,10,10s10-4.5,10-10S17.5,2,12,2z M16.2,16.2L11,13V7h1.5v5.2l4.5,2.7L16.2,16.2z'\n            />\n          </g>\n        </g>\n      </g>\n    </g>\n  ),\n});\nexport const CreativeTimLogo = createIcon({\n  displayName: \"CreativeTimLogo\",\n  viewBox: \"0 0 100 100\",\n  path: (\n    <g\n      xmlns='http://www.w3.org/2000/svg'\n      width='50px'\n      height='50px'\n      version='1.1'>\n      <g\n        id='logo-creative-tim-black'\n        stroke='none'\n        stroke-width='1'\n        fill='none'\n        fill-rule='evenodd'>\n        <g\n          id='icon'\n          transform='translate(15.000000, 19.000000)'\n          fill='currentColor'\n          fill-rule='nonzero'>\n          <path\n            d='M66.4346744,1.49018376e-13 L3.56968951,1.49018376e-13 C1.59820443,1.49018376e-13 -2.98036753e-13,1.59820443 -2.98036753e-13,3.56968951 L-2.98036753e-13,33.5035241 C-2.98036753e-13,35.4750091 1.59820443,37.0732136 3.56968951,37.0732136 L16.4677598,37.0732136 L16.4677598,66.4346744 C16.4666001,67.3810129 16.8417189,68.288989 17.5104719,68.9585615 C18.1792249,69.628134 19.0867408,70.0043639 20.03308,70.0043639 L49.9669146,70.0043639 C51.9383997,70.0043639 53.5366041,68.4061595 53.5366041,66.4346744 L53.5366041,37.0863214 L66.4346744,37.0863214 C67.3810136,37.0863221 68.2885296,36.7100915 68.9572826,36.0405189 C69.6260355,35.3709464 70.0011544,34.4629704 70,33.5166319 L70,3.56968951 C70.0011544,2.62335099 69.6260355,1.71537495 68.9572826,1.04580242 C68.2885296,0.37622988 67.3810136,1.49018376e-13 66.4346744,1.49018376e-13 Z M4.13769396,4.14206323 L32.9311503,4.14206323 L32.9311503,32.9355196 L4.13769396,32.9355196 L4.13769396,4.14206323 Z M49.3989102,65.86667 L20.6054538,65.86667 L20.6054538,37.0863214 L49.3989102,37.0863214 L49.3989102,65.86667 Z M65.8623007,32.9355196 L37.0688443,32.9355196 L37.0688443,4.14206323 L65.8623007,4.14206323 L65.8623007,32.9355196 Z'\n            id='Shape'\n          />\n          <path\n            d='M23.6988934,23.3056595 C24.5142794,24.0708897 25.7898859,24.0506562 26.5805917,23.2599503 C27.3712976,22.4692445 27.3915311,21.193638 26.6263009,20.378252 L20.015603,13.767554 C19.2050095,12.9645312 17.8987889,12.9645312 17.0881954,13.767554 L10.4600204,20.378252 C9.90907005,20.8953125 9.68342943,21.6713831 9.87125954,22.4032422 C10.0590897,23.1351013 10.6305787,23.7065903 11.3624377,23.8944204 C12.0942968,24.0822505 12.8703675,23.8566099 13.387428,23.3056595 L18.5344222,18.1586654 L23.6988934,23.3056595 Z'\n            id='Path'\n          />\n          <path\n            d='M46.3185783,23.3056595 L51.4655725,18.1586654 L56.6125667,23.3056595 C57.4279526,24.0708897 58.7035592,24.0506562 59.494265,23.2599503 C60.2849709,22.4692445 60.3052044,21.193638 59.5399742,20.378252 L52.9292763,13.767554 C52.1186828,12.9645312 50.8124622,12.9645312 50.0018687,13.767554 L43.3911708,20.378252 C42.6259406,21.193638 42.6461741,22.4692445 43.43688,23.2599503 C44.2275858,24.0506562 45.5031924,24.0708897 46.3185783,23.3056595 L46.3185783,23.3056595 Z'\n            id='Path'\n          />\n          <path\n            d='M29.8508185,46.6987044 C29.0342976,45.9346441 27.7586832,45.9567597 26.9691385,46.7486649 C26.1795937,47.54057 26.1612859,48.8162446 26.9277802,49.6304812 L33.5384782,56.2368099 C33.9262423,56.6258256 34.452915,56.8444779 35.002182,56.8444779 C35.5514489,56.8444779 36.0781217,56.6258256 36.4658857,56.2368099 L43.0765837,49.6304812 C43.6002952,49.1075502 43.8052442,48.3449453 43.6142284,47.6299323 C43.4232126,46.9149194 42.8652519,46.3561259 42.1505246,46.1640439 C41.4357974,45.971962 40.6728876,46.1757734 40.1491761,46.6987044 L35.002182,51.8500678 L29.8508185,46.6987044 Z'\n            id='Path'\n          />\n        </g>\n      </g>\n    </g>\n  ),\n\n  //   <chakra.svg\n  //   height=\"50px\"\n  //   width=\"50px\"\n  //   viewBox=\"0 0 100 100\"\n  //   fill=\"none\"\n  //   xmlns=\"http://www.w3.org/2000/svg\"\n  //   color={fill}\n  //   {...props}\n  // >\n  // </chakra.svg>\n});\n\nexport const CreditIcon = createIcon({\n  displayName: \"CreditIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <path\n      fill='currentColor'\n      d='M1.406 17.023a2.461 2.461 0 002.461 2.46h14.766a2.461 2.461 0 002.46-2.46v-6.768H1.407v6.768zm2.9-3.34a1.318 1.318 0 011.319-1.318h2.11a1.318 1.318 0 011.318 1.318v.879a1.318 1.318 0 01-1.319 1.318H5.625a1.318 1.318 0 01-1.318-1.318v-.879zM18.633 4.014H3.867a2.46 2.46 0 00-2.46 2.461v1.143h19.687V6.475a2.46 2.46 0 00-2.461-2.46z'\n    />\n  ),\n});\n\nexport const DashboardLogo = createIcon({\n  displayName: \"DashboardLogo\",\n  viewBox: \"0 0 1000 257\",\n  path: (\n    <g width='998' height='257' viewBox='0 0 998 257' fill='none'>\n      <g clip-path='url(#clip0)'>\n        <path\n          d='M388.5 115.302C406.112 115.302 413.966 126.726 416.584 136.96L441.336 127.916C436.576 109.352 419.44 89.836 388.262 89.836C354.942 89.836 329 115.54 329 151.24C329 186.464 354.942 212.882 388.976 212.882C419.44 212.882 436.814 193.128 442.288 175.04L418.012 166.234C415.394 175.04 407.064 187.654 388.976 187.654C371.602 187.654 356.608 174.564 356.608 151.24C356.608 127.916 371.602 115.302 388.5 115.302Z'\n          fill='currentColor'\n        />\n        <path\n          d='M484.894 141.244C485.37 126.488 493.7 115.064 508.932 115.064C526.306 115.064 532.732 126.488 532.732 140.768V209.312H560.34V136.008C560.34 110.542 546.536 90.074 517.976 90.074C505.838 90.074 492.748 94.358 484.894 104.592V37H457.286V209.312H484.894V141.244Z'\n          fill='currentColor'\n        />\n        <path\n          d='M577.29 177.896C577.29 196.222 592.284 212.882 616.56 212.882C635.362 212.882 646.786 203.362 652.26 194.556C652.26 203.838 653.212 208.598 653.45 209.312H679.154C678.916 208.122 677.726 201.22 677.726 190.748V133.152C677.726 110.066 664.16 89.836 628.46 89.836C599.9 89.836 581.812 107.686 579.67 127.678L604.898 133.39C606.088 121.728 614.18 112.446 628.698 112.446C643.93 112.446 650.594 120.3 650.594 130.058C650.594 134.104 648.69 137.436 642.026 138.388L612.276 142.91C592.522 145.766 577.29 157.19 577.29 177.896ZM621.796 191.224C610.848 191.224 604.898 184.084 604.898 176.23C604.898 166.71 611.8 161.95 620.368 160.522L650.594 156V161.236C650.594 183.846 637.266 191.224 621.796 191.224Z'\n          fill='currentColor'\n        />\n        <path\n          d='M810.108 93.406H773.456L728.95 140.292V37H701.58V209.312H728.95V176.944L743.23 161.95L777.264 209.312H811.06L762.508 142.434L810.108 93.406Z'\n          fill='currentColor'\n        />\n        <path\n          d='M889.349 92.692C888.159 92.454 885.303 91.978 881.971 91.978C866.739 91.978 853.887 99.356 848.413 111.97V93.406H821.519V209.312H849.127V154.096C849.127 132.438 858.885 120.062 880.305 120.062C883.161 120.062 886.255 120.3 889.349 120.776V92.692Z'\n          fill='currentColor'\n        />\n        <path\n          d='M895.968 177.896C895.968 196.222 910.962 212.882 935.238 212.882C954.04 212.882 965.464 203.362 970.938 194.556C970.938 203.838 971.89 208.598 972.128 209.312H997.832C997.594 208.122 996.404 201.22 996.404 190.748V133.152C996.404 110.066 982.838 89.836 947.138 89.836C918.578 89.836 900.49 107.686 898.348 127.678L923.576 133.39C924.766 121.728 932.858 112.446 947.376 112.446C962.608 112.446 969.272 120.3 969.272 130.058C969.272 134.104 967.368 137.436 960.704 138.388L930.954 142.91C911.2 145.766 895.968 157.19 895.968 177.896ZM940.474 191.224C929.526 191.224 923.576 184.084 923.576 176.23C923.576 166.71 930.478 161.95 939.046 160.522L969.272 156V161.236C969.272 183.846 955.944 191.224 940.474 191.224Z'\n          fill='currentColor'\n        />\n        <rect width='257' height='257' rx='128.5' fill='#4FD1C5' />\n        <path\n          d='M69.5584 133.985L157.15 46.9959C158.787 45.3708 161.42 47.3484 160.315 49.3729L127.714 109.125C126.987 110.457 127.951 112.083 129.47 112.083H185.809C187.624 112.083 188.501 114.306 187.174 115.545L88.4456 207.687C86.6753 209.339 84.0405 207.011 85.4617 205.051L132.197 140.578C133.156 139.256 132.211 137.404 130.578 137.404H70.9677C69.1826 137.404 68.2917 135.243 69.5584 133.985Z'\n          fill='white'\n        />\n      </g>\n      <defs>\n        <linearGradient\n          id='paint0_linear'\n          x1='128.5'\n          y1='0'\n          x2='128.5'\n          y2='257'\n          gradientUnits='userSpaceOnUse'>\n          <stop stop-color='#7BCBD4' />\n          <stop offset='1' stop-color='#29C6B7' />\n        </linearGradient>\n        <clipPath id='clip0'>\n          <rect width='997.832' height='257' fill='white' />\n        </clipPath>\n      </defs>\n    </g>\n  ),\n});\n\nexport const DashboardLogoWhite = createIcon({\n  displayName: \"DashboardLogo\",\n  viewBox: \"0 0 163.5 42\",\n  path: (\n    <g fill='none'>\n      <path\n        d='M63.452 19.292c2.877 0 4.16 1.911 4.587 3.623l4.043-1.513c-.777-3.106-3.576-6.371-8.668-6.371-5.443 0-9.68 4.3-9.68 10.274 0 5.893 4.237 10.313 9.796 10.313 4.976 0 7.813-3.305 8.707-6.331l-3.965-1.473c-.427 1.473-1.788 3.583-4.742 3.583-2.837 0-5.286-2.19-5.286-6.092 0-3.903 2.449-6.013 5.208-6.013zM79.196 23.632c.078-2.469 1.438-4.38 3.926-4.38 2.838 0 3.887 1.911 3.887 4.3v11.47h4.51V22.755c0-4.26-2.255-7.685-6.92-7.685-1.982 0-4.12.716-5.403 2.429V6.19h-4.509v28.831h4.51V23.632zM94.287 29.765c0 3.066 2.449 5.853 6.414 5.853 3.071 0 4.936-1.592 5.83-3.066 0 1.553.156 2.35.195 2.47h4.198c-.039-.2-.233-1.355-.233-3.107v-9.637c0-3.862-2.216-7.247-8.047-7.247-4.664 0-7.619 2.986-7.968 6.332l4.12.955c.194-1.951 1.516-3.504 3.887-3.504 2.488 0 3.576 1.314 3.576 2.947 0 .677-.311 1.234-1.399 1.393l-4.859.757c-3.226.478-5.714 2.39-5.714 5.854zm7.269 2.23c-1.788 0-2.76-1.195-2.76-2.509 0-1.593 1.127-2.39 2.527-2.628l4.936-.757v.876c0 3.783-2.176 5.018-4.703 5.018zM132.312 15.628h-5.986l-7.269 7.845V6.191h-4.47v28.83h4.47v-5.416l2.332-2.508 5.559 7.924h5.52l-7.93-11.19 7.774-8.203zM145.254 15.509a6.3 6.3 0 00-1.205-.12c-2.487 0-4.587 1.235-5.481 3.345v-3.106h-4.392v19.393h4.509v-9.238c0-3.624 1.594-5.695 5.092-5.695.467 0 .972.04 1.477.12v-4.7zM146.335 29.765c0 3.066 2.449 5.853 6.414 5.853 3.071 0 4.937-1.592 5.831-3.066 0 1.553.156 2.35.194 2.47h4.199c-.039-.2-.234-1.355-.234-3.107v-9.637c0-3.862-2.215-7.247-8.046-7.247-4.665 0-7.619 2.986-7.969 6.332l4.121.955c.194-1.951 1.516-3.504 3.887-3.504 2.488 0 3.576 1.314 3.576 2.947 0 .677-.311 1.234-1.399 1.393l-4.859.757c-3.227.478-5.715 2.39-5.715 5.854zm7.269 2.23c-1.788 0-2.759-1.195-2.759-2.509 0-1.593 1.127-2.39 2.526-2.628l4.937-.757v.876c0 3.783-2.177 5.018-4.704 5.018zM41.975 21.5C41.975 9.626 32.578 0 20.987 0 9.398 0 0 9.626 0 21.5S9.396 43 20.988 43c11.59 0 20.987-9.626 20.987-21.5z'\n        fill='#fff'\n      />\n      <path\n        d='M11.36 22.418L25.668 7.863c.267-.272.697.06.517.398l-5.325 9.997c-.119.223.039.495.287.495h9.202c.296 0 .44.372.223.58L14.446 34.748c-.29.277-.72-.113-.488-.44l7.633-10.788c.157-.221.003-.531-.264-.531H11.59c-.292 0-.437-.362-.23-.572z'\n        fill='#3BCBBE'\n      />\n    </g>\n  ),\n});\n\nexport const DocumentIcon = createIcon({\n  displayName: \"DocumentIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g>\n      <path\n        fill='currentColor'\n        d='M18.809 10.344h-6.153a2.11 2.11 0 01-2.11-2.11V2.083a.176.176 0 00-.175-.176H6.328A2.812 2.812 0 003.516 4.72v14.063a2.812 2.812 0 002.812 2.812h9.844a2.812 2.812 0 002.812-2.813V10.52a.176.176 0 00-.175-.176z'\n      />\n      <path\n        fill='currentColor'\n        d='M18.423 8.789l-6.32-6.32a.088.088 0 00-.15.062v5.705a.703.703 0 00.703.703h5.705a.088.088 0 00.062-.15z'\n      />\n    </g>\n  ),\n});\n\nexport const GlobeIcon = createIcon({\n  displayName: \"GlobeIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g>\n      <path\n        stroke='currentColor'\n        fill='transparent'\n        d='M11.25 2.109a9.14 9.14 0 100 18.281 9.14 9.14 0 000-18.281z'\n        stroke-width='.75'\n        stroke-miterlimit='10'\n      />\n      <path\n        stroke='currentColor'\n        fill='transparent'\n        d='M11.25 2.109C8.698 2.109 6.3 6.2 6.3 11.249c0 5.048 2.4 9.14 4.951 9.14 2.552 0 4.951-4.092 4.951-9.14 0-5.048-2.399-9.14-4.95-9.14z'\n        stroke-width='.75'\n        stroke-miterlimit='10'\n      />\n      <path\n        stroke='currentColor'\n        fill='transparent'\n        d='M5.156 5.156C6.836 6.349 8.952 7.06 11.25 7.06c2.298 0 4.414-.711 6.094-1.904'\n      />\n      <path\n        stroke='currentColor'\n        fill='transparent'\n        d='M5.156 5.156C6.836 6.349 8.952 7.06 11.25 7.06c2.298 0 4.414-.711 6.094-1.904M17.344 17.344c-1.68-1.193-3.796-1.904-6.094-1.904-2.298 0-4.413.711-6.094 1.904'\n        stroke-width='.75'\n        stroke-linecap='round'\n        stroke-linejoin='round'\n      />\n      <path\n        stroke='currentColor'\n        fill='transparent'\n        d='M11.25 2.109v18.28M20.39 11.249H2.11'\n        stroke-width='.75'\n        stroke-miterlimit='10'\n      />\n    </g>\n  ),\n});\n\nexport const HelpIcon = createIcon({\n  displayName: \"HelpIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <path\n      fill='currentColor'\n      d='M11.25 0C5.04 0 0 5.04 0 11.25S5.04 22.5 11.25 22.5 22.5 17.46 22.5 11.25 17.46 0 11.25 0zm-.352 17.813a1.172 1.172 0 110-2.344 1.172 1.172 0 010 2.344zm1.96-5.977c-.95.637-1.08 1.222-1.08 1.758a.82.82 0 11-1.641 0c0-1.284.59-2.305 1.806-3.121 1.13-.758 1.768-1.239 1.768-2.295 0-.718-.41-1.264-1.26-1.668-.199-.095-.644-.187-1.191-.18-.687.008-1.22.172-1.63.503-.775.623-.84 1.302-.84 1.312a.821.821 0 11-1.642-.08c.007-.142.106-1.425 1.452-2.507.698-.562 1.585-.854 2.636-.866.745-.01 1.444.117 1.918.34 1.418.672 2.198 1.79 2.198 3.146 0 1.982-1.325 2.872-2.494 3.658z'\n    />\n  ),\n});\n\nexport const HomeIcon = createIcon({\n  displayName: \"HomeIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g>\n      <path\n        fill='currentColor'\n        d='M11.494 4.951a.351.351 0 00-.486 0l-8.09 7.729a.352.352 0 00-.109.254v7.254a1.406 1.406 0 001.405 1.406h4.223a.703.703 0 00.704-.703v-5.976a.351.351 0 01.351-.352h3.516a.351.351 0 01.351.352v5.976a.703.703 0 00.704.703h4.22a1.407 1.407 0 001.407-1.406v-7.254a.35.35 0 00-.108-.254L11.494 4.95z'\n      />\n      <path\n        fill='currentColor'\n        d='M21.574 11.23l-3.287-3.144V3.314a.703.703 0 00-.703-.703h-2.11a.703.703 0 00-.703.703V4.72l-2.545-2.434c-.239-.24-.593-.378-.976-.378-.38 0-.734.138-.972.379L.93 11.23a.717.717 0 00-.058.983.703.703 0 001.018.046l9.119-8.713a.352.352 0 01.486 0l9.12 8.713a.703.703 0 00.992-.019c.27-.28.248-.74-.033-1.01z'\n      />\n    </g>\n  ),\n});\n\nexport const InvisionLogo = createIcon({\n  displayName: \"InvisionLogo\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g clip-path='url(#clip0)'>\n      <path\n        d='M18.687 0H2.313A1.813 1.813 0 00.5 1.811v16.374C.5 19.188 1.312 20 2.313 20h16.374a1.813 1.813 0 001.813-1.813V1.812A1.813 1.813 0 0018.687 0z'\n        fill='#DC395F'\n      />\n      <path\n        d='M7.184 6.293c.665 0 1.222-.522 1.222-1.204 0-.683-.557-1.204-1.222-1.204-.665 0-1.222.521-1.222 1.204 0 .682.557 1.204 1.222 1.204zM4.65 12.739a4.134 4.134 0 00-.108.905c0 1.06.575 1.764 1.797 1.764 1.013 0 1.834-.602 2.426-1.573l-.361 1.449h2.012l1.15-4.612c.287-1.168.844-1.774 1.689-1.774.665 0 1.078.413 1.078 1.096 0 .197-.018.413-.09.646l-.593 2.12c-.09.306-.126.611-.126.899 0 1.006.593 1.742 1.833 1.742 1.06 0 1.904-.682 2.371-2.317l-.79-.305c-.395 1.095-.737 1.293-1.006 1.293-.27 0-.414-.18-.414-.538 0-.162.037-.342.09-.558l.575-2.065c.144-.485.198-.915.198-1.31 0-1.546-.934-2.352-2.066-2.352-1.06 0-2.138.956-2.677 1.962l.395-1.806H8.962L8.53 8.996h1.438l-.885 3.544c-.695 1.545-1.972 1.57-2.132 1.534-.264-.06-.432-.159-.432-.5 0-.198.036-.482.126-.823l1.348-5.346H4.579l-.431 1.591h1.419L4.65 12.74'\n        fill='#fff'\n      />\n    </g>\n  ),\n});\n\nexport const JiraLogo = createIcon({\n  displayName: \"JiraLogo\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g clip-path='url(#clip0)'>\n      <path\n        d='M20.26 10.42l-8.863-8.93-.86-.865-6.67 6.722L.814 10.42a.827.827 0 000 1.162l6.096 6.14 3.627 3.654 6.67-6.722.105-.104 2.947-2.964a.824.824 0 000-1.166zm-9.722 3.649L7.493 11l3.045-3.068L13.582 11l-3.044 3.068z'\n        fill='#2684FF'\n      />\n      <path\n        d='M10.537 7.932a5.184 5.184 0 01-1.502-3.637A5.185 5.185 0 0110.515.65L3.852 7.36l3.626 3.654 3.06-3.082z'\n        fill='url(#paint0_linear)'\n      />\n      <path\n        d='M13.59 10.992l-3.053 3.076a5.186 5.186 0 011.502 3.653c0 1.37-.54 2.683-1.502 3.652l6.682-6.728-3.63-3.653z'\n        fill='url(#paint1_linear)'\n      />\n    </g>\n  ),\n});\n\nexport const MastercardIcon = createIcon({\n  displayName: \"MastercardIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <svg\n      width='24'\n      height='20'\n      viewBox='0 0 21 15'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'>\n      <circle cx='6.63158' cy='7.49999' r='6.63158' fill='#EB001B' />\n      <circle cx='14.3686' cy='7.49999' r='6.63158' fill='#F79E1B' />\n    </svg>\n  ),\n});\n\nexport const PayPalIcon = createIcon({\n  displayName: \"PayPalIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g>\n      <path\n        fill='currentColor'\n        d='M16.179 2.532C15.142 1.357 13.265.854 10.863.854H3.895a.997.997 0 00-.986.834L.007 19.945a.595.595 0 00.591.686H4.9l1.08-6.8-.033.215a.993.993 0 01.983-.834h2.044c4.017 0 7.16-1.619 8.08-6.3.027-.14.07-.406.07-.406.262-1.732-.001-2.907-.945-3.974z'\n      />\n      <path\n        fill='currentColor'\n        d='M18.213 7.393c-.998 4.61-4.184 7.048-9.24 7.048H7.142L5.773 23.1h2.973a.87.87 0 00.862-.731l.035-.184.684-4.297.044-.237a.87.87 0 01.86-.731h.544c3.514 0 6.264-1.416 7.068-5.51.322-1.644.166-3.021-.63-4.017z'\n      />\n    </g>\n  ),\n});\n\nexport const PersonIcon = createIcon({\n  displayName: \"PersonIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <path\n      fill='currentColor'\n      d='M14.618 3.338c-.855-.924-2.05-1.432-3.368-1.432-1.325 0-2.524.505-3.375 1.423-.86.928-1.28 2.188-1.181 3.55.195 2.686 2.239 4.87 4.556 4.87s4.358-2.184 4.556-4.87c.1-1.349-.322-2.607-1.188-3.541zM18.984 21.592H3.515a1.363 1.363 0 01-1.063-.489 1.552 1.552 0 01-.316-1.279c.371-2.058 1.529-3.786 3.348-5 1.616-1.076 3.664-1.67 5.766-1.67s4.15.594 5.765 1.67c1.82 1.214 2.977 2.942 3.348 5 .085.471-.03.937-.315 1.279a1.362 1.362 0 01-1.064.49z'\n    />\n  ),\n});\n\nexport const ProfileIcon = createIcon({\n  displayName: \"ProfileIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g>\n      <path d='M0 0h24v24H0V0z' fill='transparent' />\n      <path\n        fill='currentColor'\n        d='M12 12c2.21 0 4-1.79 4-4s-1.79-4-4-4-4 1.79-4 4 1.79 4 4 4zm0 2c-2.67 0-8 1.34-8 4v1c0 .55.45 1 1 1h14c.55 0 1-.45 1-1v-1c0-2.66-5.33-4-8-4z'\n      />\n    </g>\n  ),\n});\n\nexport const RocketIcon = createIcon({\n  displayName: \"RocketIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g>\n      <path\n        fill='currentColor'\n        d='M20.99 2.182a.209.209 0 00-.156-.16c-2.574-.63-8.521 1.613-11.743 4.833a13.93 13.93 0 00-1.566 1.85c-.994-.087-1.987-.014-2.834.355-2.39 1.052-3.085 3.796-3.279 4.976a.424.424 0 00.464.492l3.837-.423c.002.29.02.578.052.866.02.2.108.386.25.527l1.486 1.482a.86.86 0 00.528.25c.286.033.573.05.86.053l-.42 3.832a.424.424 0 00.492.464c1.178-.19 3.927-.885 4.972-3.274.37-.847.445-1.836.36-2.824a13.96 13.96 0 001.855-1.567c3.232-3.216 5.462-9.03 4.842-11.732zm-8.067 7.896a2.11 2.11 0 112.983-2.984 2.11 2.11 0 01-2.983 2.984z'\n      />\n      <path\n        fill='currentColor'\n        d='M7.4 18.054c-.24.241-.627.335-1.092.416-1.044.178-1.967-.725-1.779-1.78.072-.401.283-.962.415-1.094a.192.192 0 00-.16-.328 2.636 2.636 0 00-1.544.753c-1.033 1.034-1.13 4.87-1.13 4.87s3.838-.097 4.872-1.13c.417-.417.682-.961.752-1.546.017-.184-.207-.293-.334-.16z'\n      />\n    </g>\n  ),\n});\n\nexport const SettingsIcon = createIcon({\n  displayName: \"SettingsIcon\",\n  viewBox: \"0 0 24 24\",\n  // path can also be an array of elements, if you have multiple paths, lines, shapes, etc.\n  path: (\n    <g>\n      <path d='M0,0h24v24H0V0z' fill='none' />\n      <path\n        fill='currentColor'\n        d='M19.14,12.94c0.04-0.3,0.06-0.61,0.06-0.94c0-0.32-0.02-0.64-0.07-0.94l2.03-1.58c0.18-0.14,0.23-0.41,0.12-0.61 l-1.92-3.32c-0.12-0.22-0.37-0.29-0.59-0.22l-2.39,0.96c-0.5-0.38-1.03-0.7-1.62-0.94L14.4,2.81c-0.04-0.24-0.24-0.41-0.48-0.41 h-3.84c-0.24,0-0.43,0.17-0.47,0.41L9.25,5.35C8.66,5.59,8.12,5.92,7.63,6.29L5.24,5.33c-0.22-0.08-0.47,0-0.59,0.22L2.74,8.87 C2.62,9.08,2.66,9.34,2.86,9.48l2.03,1.58C4.84,11.36,4.8,11.69,4.8,12s0.02,0.64,0.07,0.94l-2.03,1.58 c-0.18,0.14-0.23,0.41-0.12,0.61l1.92,3.32c0.12,0.22,0.37,0.29,0.59,0.22l2.39-0.96c0.5,0.38,1.03,0.7,1.62,0.94l0.36,2.54 c0.05,0.24,0.24,0.41,0.48,0.41h3.84c0.24,0,0.44-0.17,0.47-0.41l0.36-2.54c0.59-0.24,1.13-0.56,1.62-0.94l2.39,0.96 c0.22,0.08,0.47,0,0.59-0.22l1.92-3.32c0.12-0.22,0.07-0.47-0.12-0.61L19.14,12.94z M12,15.6c-1.98,0-3.6-1.62-3.6-3.6 s1.62-3.6,3.6-3.6s3.6,1.62,3.6,3.6S13.98,15.6,12,15.6z'\n      />\n    </g>\n  ),\n});\n\nexport const SlackLogo = createIcon({\n  displayName: \"SlackLogo\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g clip-path='url(#clip0)' fill-rule='evenodd' clip-rule='evenodd'>\n      <path\n        d='M7.832.5c-1.105 0-2 .919-1.999 2.05 0 1.13.895 2.048 2 2.05h2V2.55c.001-1.13-.894-2.048-2-2.05zm0 5.467H2.5c-1.106 0-2.001.918-2 2.05-.002 1.13.894 2.048 2 2.05h5.332c1.106-.001 2.002-.919 2-2.05.002-1.132-.894-2.05-2-2.05z'\n        fill='#36C5F0'\n      />\n      <path\n        d='M20.5 8.016c0-1.13-.895-2.048-2-2.05-1.106.002-2.002.92-2 2.05v2.05h2c1.105 0 2-.918 2-2.05zm-5.334 0V2.55c.001-1.13-.893-2.048-2-2.05-1.105 0-2 .919-2 2.05v5.466c-.001 1.131.894 2.049 2 2.05 1.106 0 2.001-.918 2-2.05z'\n        fill='#2EB67D'\n      />\n      <path\n        d='M13.166 21c1.106 0 2.001-.919 2-2.05.001-1.13-.894-2.048-2-2.05h-2v2.05c-.001 1.13.894 2.048 2 2.05zm0-5.467h5.333c1.106-.001 2.002-.92 2-2.05.002-1.131-.893-2.049-1.999-2.05h-5.333c-1.106 0-2.001.918-2 2.05-.001 1.13.893 2.049 1.999 2.05z'\n        fill='#ECB22E'\n      />\n      <path\n        d='M.5 13.483c-.001 1.13.895 2.049 2 2.05 1.106-.001 2.001-.92 2-2.05v-2.05h-2c-1.105.001-2.001.919-2 2.05zm5.333 0v5.467c-.001 1.13.894 2.048 2 2.05 1.105 0 2-.919 2-2.05v-5.465c.002-1.131-.894-2.05-2-2.05-1.106 0-2 .917-2 2.048z'\n        fill='#E01E5A'\n      />\n    </g>\n  ),\n});\n\nexport const SpotifyLogo = createIcon({\n  displayName: \"SpotifyLogo\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g clip-path='url(#clip0)'>\n      <path\n        d='M10.5 0C4.977 0 .5 4.477.5 10s4.477 10 10 10 10-4.477 10-10c0-5.522-4.477-10-10-10zm4.586 14.422a.623.623 0 01-.857.208c-2.348-1.435-5.304-1.76-8.785-.964a.623.623 0 11-.277-1.216c3.808-.87 7.076-.495 9.712 1.115.294.181.387.564.207.857zm1.223-2.722a.78.78 0 01-1.072.257c-2.687-1.652-6.786-2.13-9.965-1.166a.78.78 0 01-.973-.519.781.781 0 01.52-.972c3.632-1.102 8.147-.569 11.233 1.329a.78.78 0 01.258 1.072zm.106-2.835C13.19 6.95 7.875 6.775 4.797 7.708a.935.935 0 11-.543-1.79c3.533-1.072 9.404-.865 13.115 1.338a.935.935 0 01-.954 1.609z'\n        fill='#2EBD59'\n      />\n    </g>\n  ),\n});\n\nexport const SupportIcon = createIcon({\n  // Doesn't display the full icon without w and h being specified\n  displayName: \"BuildIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <path\n      fill='currentColor'\n      d='M20.885 5.547a.703.703 0 00-1.122-.176l-2.7 2.702a.708.708 0 01-.995 0l-1.167-1.169a.702.702 0 010-.994l2.689-2.69a.704.704 0 00-.21-1.138c-2.031-.908-4.566-.435-6.164 1.152-1.358 1.348-1.763 3.455-1.11 5.78a.698.698 0 01-.197.703L2.593 16.4a2.82 2.82 0 103.981 3.983l6.754-7.332a.699.699 0 01.693-.2 7.885 7.885 0 002.03.279c1.469 0 2.757-.475 3.686-1.39 1.72-1.695 1.983-4.57 1.148-6.192zM4.623 19.901a1.407 1.407 0 11-.305-2.797 1.407 1.407 0 01.305 2.797z'\n    />\n  ),\n});\n\nexport const StatsIcon = createIcon({\n  displayName: \"StatsIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <path\n      fill='currentColor'\n      d='M4.57 22.297H3.164a1.055 1.055 0 01-1.055-1.054v-6.328a1.055 1.055 0 011.055-1.055H4.57a1.055 1.055 0 011.055 1.055v6.328a1.055 1.055 0 01-1.055 1.054zM14.414 22.296h-1.406a1.055 1.055 0 01-1.055-1.055V10.695a1.055 1.055 0 011.055-1.055h1.406a1.055 1.055 0 011.055 1.055V21.24a1.055 1.055 0 01-1.055 1.055zM19.336 22.297H17.93a1.055 1.055 0 01-1.055-1.055V5.773A1.055 1.055 0 0117.93 4.72h1.406a1.055 1.055 0 011.055 1.054v15.47a1.055 1.055 0 01-1.055 1.054zM9.492 22.297H8.086a1.055 1.055 0 01-1.055-1.055V2.257a1.055 1.055 0 011.055-1.054h1.406a1.055 1.055 0 011.055 1.054v18.985a1.055 1.055 0 01-1.055 1.055z'\n    />\n  ),\n});\n\nexport const WalletIcon = createIcon({\n  displayName: \"WalletIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <g>\n      <path\n        fill='currentColor'\n        d='M4.447 4.818h14.062c.164 0 .328.01.491.031a2.9 2.9 0 00-3.406-2.441L4.03 4.382h-.013a2.9 2.9 0 00-1.805 1.149 3.848 3.848 0 012.236-.713zM18.51 5.875H4.446a2.816 2.816 0 00-2.813 2.812v8.438a2.816 2.816 0 002.813 2.812h14.062a2.815 2.815 0 002.813-2.812V8.687a2.815 2.815 0 00-2.813-2.812zm-2.088 8.437a1.406 1.406 0 110-2.811 1.406 1.406 0 010 2.811z'\n      />\n      <path\n        fill='currentColor'\n        d='M1.656 11.651V7.28c0-.952.528-2.549 2.358-2.895 1.553-.291 3.091-.291 3.091-.291s1.011.703.176.703-.813 1.077 0 1.077 0 1.032 0 1.032L4.007 10.62l-2.35 1.032z'\n      />\n    </g>\n  ),\n});\n\nexport const VisaIcon = createIcon({\n  displayName: \"VisaIcon\",\n  viewBox: \"0 0 24 24\",\n  path: (\n    <svg\n      width='26'\n      height='20'\n      viewBox='0 0 30 9'\n      fill='none'\n      xmlns='http://www.w3.org/2000/svg'>\n      <path\n        fill-rule='evenodd'\n        clip-rule='evenodd'\n        d='M12.6708 2.96349C12.6568 4.15055 13.653 4.81298 14.4034 5.20684C15.1744 5.61099 15.4333 5.87013 15.4304 6.23147C15.4245 6.78459 14.8153 7.02862 14.2452 7.03812C13.2505 7.05475 12.6723 6.74889 12.2125 6.51753L11.8542 8.32341C12.3155 8.55247 13.1696 8.75217 14.0554 8.76087C16.1345 8.76087 17.4947 7.65543 17.5021 5.94145C17.5102 3.76625 14.7087 3.64579 14.7278 2.67348C14.7344 2.37871 14.9956 2.06408 15.568 1.98406C15.8512 1.94368 16.6332 1.91274 17.5198 2.35252L17.8677 0.605286C17.391 0.418253 16.7782 0.239136 16.0153 0.239136C14.0583 0.239136 12.6819 1.35962 12.6708 2.96349ZM21.2115 0.389687C20.8319 0.389687 20.5118 0.628245 20.3691 0.99433L17.3991 8.63249H19.4767L19.8901 7.40183H22.429L22.6689 8.63249H24.5L22.9021 0.389687H21.2115ZM21.5021 2.61641L22.1016 5.7116H20.4596L21.5021 2.61641ZM10.1518 0.389687L8.51418 8.63249H10.4939L12.1308 0.389687H10.1518ZM7.22303 0.389687L5.16233 6.00003L4.32878 1.22966C4.23097 0.697187 3.84472 0.389687 3.41579 0.389687H0.0471011L0 0.629037C0.691574 0.790671 1.47729 1.0514 1.95326 1.33033C2.24457 1.50067 2.32775 1.64964 2.42336 2.05458L4.00214 8.63249H6.0945L9.3021 0.389687H7.22303Z'\n        fill='#4318FF'\n      />\n    </svg>\n  ),\n});\n","\n\nimport { createContext } from \"react\";\n\nexport const SidebarContext = createContext();\n","export default __webpack_public_path__ + \"static/media/iot-logo.dc96a306.svg\";","export default __webpack_public_path__ + \"static/media/flag.1f944995.svg\";","import { HamburgerIcon } from \"@chakra-ui/icons\";\n// chakra imports\nimport {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Button,\n  Drawer,\n  DrawerBody,\n  DrawerCloseButton,\n  DrawerContent,\n  DrawerOverlay,\n  Flex,\n  HStack,\n  Icon,\n  Image,\n  Link,\n  List,\n  ListItem,\n  Stack,\n  Text,\n  useColorModeValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\n// import LogoImg from \"assets/img/BackgroundCard1.png\";\n\nimport IconBox from \"components/Icons/IconBox\";\nimport { CreativeTimLogo, UserLogo } from \"components/Icons/Icons\";\nimport {\n  renderThumbDark,\n  renderThumbLight,\n  renderTrack,\n  renderTrackRTL,\n  renderView,\n  renderViewRTL,\n} from \"components/Scrollbar/Scrollbar\";\nimport { HSeparator } from \"components/Separator/Separator\";\nimport { SidebarContext } from \"contexts/SidebarContext\";\nimport React from \"react\";\nimport { Scrollbars } from \"react-custom-scrollbars-2\";\nimport { FaCircle } from \"react-icons/fa\";\nimport { NavLink, useLocation, useNavigate } from \"react-router-dom\";\nimport SidebarHelp from \"./SidebarHelp\";\nimport { getRoleName } from \"variables/genFunc\";\nimport { CgProfile } from \"react-icons/cg\";\n\n// FUNCTIONS\n\nfunction Sidebar(props) {\n  // to check for active links and opened collapses\n  let location = useLocation();\n  const navigate = useNavigate();\n  // this is for the rest of the collapses\n  const { sidebarWidth, setSidebarWidth, toggleSidebar } = React.useContext(\n    SidebarContext\n  );\n  const mainPanel = React.useRef();\n  let variantChange = \"0.2s linear\";\n  // verifies if routeName is the one active (in browser input)\n  const activeRoute = (routeName) => {\n    return location.pathname.includes(routeName);\n  };\n  // this function creates the links and collapses that appear in the sidebar (left menu)\n  const createLinks = (routes) => {\n    const { sidebarVariant } = props;\n    // Chakra Color Mode\n    let activeBg = useColorModeValue(\"teal.500\", \"teal.500\");\n    let activeAccordionBg = useColorModeValue(\"white\", \"gray.700\");\n    let inactiveBg = useColorModeValue(\"white\", \"gray.700\");\n    let inactiveColorIcon = useColorModeValue(\"teal.500\", \"teal.500\");\n    let activeColorIcon = useColorModeValue(\"white\", \"white\");\n    let activeColor = useColorModeValue(\"gray.700\", \"white\");\n    let inactiveColor = useColorModeValue(\"gray.400\", \"gray.400\");\n    let sidebarActiveShadow = \"0px 7px 11px rgba(0, 0, 0, 0.04)\";\n    // Here are all the props that may change depending on sidebar's state.(Opaque or transparent)\n    if (sidebarVariant === \"opaque\") {\n      activeBg = useColorModeValue(\"teal.500\", \"teal.500\");\n      inactiveBg = useColorModeValue(\"gray.100\", \"gray.600\");\n      activeColor = useColorModeValue(\"gray.700\", \"white\");\n      inactiveColor = useColorModeValue(\"gray.400\", \"gray.400\");\n      sidebarActiveShadow = \"none\";\n    }\n    return routes.map((prop, index) => {\n      if (\n        !prop.hidden &&\n        JSON.parse(localStorage.getItem(\"authData\"))?.role_id == prop.role\n      ) {\n        if (prop.category) {\n          return (\n            <>\n              <Text\n                fontSize={ sidebarWidth === 275 ? \"md\" : \"xs\" }\n                color={ activeColor }\n                fontWeight='bold'\n                mx='auto'\n                ps={ {\n                  sm: \"10px\",\n                  xl: \"16px\",\n                } }\n                py='12px'\n                key={ index }>\n                { prop.name }\n              </Text>\n              { createLinks(prop.items) }\n            </>\n          );\n        }\n        if (prop.collapse) {\n          return (\n            <Accordion allowToggle>\n              <AccordionItem border='none'>\n                <AccordionButton\n                  display='flex'\n                  align='center'\n                  justify='center'\n                  boxShadow={\n                    activeRoute(prop.path) && prop.icon\n                      ? sidebarActiveShadow\n                      : null\n                  }\n                  _hover={ {\n                    boxShadow:\n                      activeRoute(prop.path) && prop.icon\n                        ? sidebarActiveShadow\n                        : null,\n                  } }\n                  _focus={ {\n                    boxShadow: \"none\",\n                  } }\n                  borderRadius='15px'\n                  w={ sidebarWidth === 275 ? \"100%\" : \"77%\" }\n                  px={ prop.icon ? null : \"0px\" }\n                  py={ prop.icon ? \"12px\" : null }\n                  bg={\n                    activeRoute(prop.path) && prop.icon\n                      ? activeAccordionBg\n                      : \"transparent\"\n                  }>\n                  { activeRoute(prop.path) ? (\n                    <Button\n                      boxSize='initial'\n                      justifyContent='flex-start'\n                      alignItems='center'\n                      bg='transparent'\n                      transition={ variantChange }\n                      mx={ {\n                        xl: \"auto\",\n                      } }\n                      px='0px'\n                      borderRadius='15px'\n                      w='100%'\n                      _hover='none'\n                      _active={ {\n                        bg: \"inherit\",\n                        transform: \"none\",\n                        borderColor: \"transparent\",\n                        border: \"none\",\n                      } }\n                      _focus={ {\n                        transform: \"none\",\n                        borderColor: \"transparent\",\n                        border: \"none\",\n                      } }>\n                      { prop.icon ? (\n                        <Flex>\n                          <IconBox\n                            bg={ activeBg }\n                            color={ activeColorIcon }\n                            h='30px'\n                            w='30px'\n                            me='12px'\n                            transition={ variantChange }>\n                            { prop.icon }\n                          </IconBox>\n                          <Text\n                            color={ activeColor }\n                            my='auto'\n                            fontSize='sm'\n                            display={ sidebarWidth === 275 ? \"block\" : \"none\" }>\n                            { prop.name }\n                          </Text>\n                        </Flex>\n                      ) : (\n                        <HStack\n                          spacing={ sidebarWidth === 275 ? \"22px\" : \"0px\" }\n                          ps={ sidebarWidth === 275 ? \"10px\" : \"0px\" }\n                          ms={ sidebarWidth === 275 ? \"0px\" : \"8px\" }>\n                          <Icon\n                            as={ FaCircle }\n                            w='10px'\n                            color='teal.500'\n                            display={ sidebarWidth === 275 ? \"block\" : \"none\" }\n                          />\n                          <Text color={ activeColor } my='auto' fontSize='sm'>\n                            { sidebarWidth === 275 ? prop.name : prop.name[0] }\n                          </Text>\n                        </HStack>\n                      ) }\n                    </Button>\n                  ) : (\n                    <Button\n                      boxSize='initial'\n                      justifyContent='flex-start'\n                      alignItems='center'\n                      bg='transparent'\n                      mx={ {\n                        xl: \"auto\",\n                      } }\n                      px='0px'\n                      borderRadius='15px'\n                      w='100%'\n                      _hover='none'\n                      _active={ {\n                        bg: \"inherit\",\n                        transform: \"none\",\n                        borderColor: \"transparent\",\n                      } }\n                      _focus={ {\n                        borderColor: \"transparent\",\n                        boxShadow: \"none\",\n                      } }>\n                      { prop.icon ? (\n                        <Flex>\n                          <IconBox\n                            bg={ inactiveBg }\n                            color={ inactiveColorIcon }\n                            h='30px'\n                            w='30px'\n                            me='12px'\n                            transition={ variantChange }\n                            boxShadow={ sidebarActiveShadow }\n                            _hover={ { boxShadow: sidebarActiveShadow } }>\n                            { prop.icon }\n                          </IconBox>\n                          <Text\n                            color={ inactiveColor }\n                            my='auto'\n                            fontSize='sm'\n                            display={ sidebarWidth === 275 ? \"block\" : \"none\" }>\n                            { prop.name }\n                          </Text>\n                        </Flex>\n                      ) : (\n                        <HStack\n                          spacing={ sidebarWidth === 275 ? \"26px\" : \"0px\" }\n                          ps={ sidebarWidth === 275 ? \"10px\" : \"0px\" }\n                          ms={ sidebarWidth === 275 ? \"0px\" : \"8px\" }>\n                          <Icon\n                            as={ FaCircle }\n                            w='6px'\n                            color='teal.500'\n                            display={ sidebarWidth === 275 ? \"block\" : \"none\" }\n                          />\n                          <Text\n                            color={ inactiveColor }\n                            my='auto'\n                            fontSize='md'\n                            fontWeight='normal'>\n                            { sidebarWidth === 275 ? prop.name : prop.name[0] }\n                          </Text>\n                        </HStack>\n                      ) }\n                    </Button>\n                  ) }\n                  <AccordionIcon\n                    color='gray.400'\n                    display={\n                      prop.icon\n                        ? sidebarWidth === 275\n                          ? \"block\"\n                          : \"none\"\n                        : \"block\"\n                    }\n                    transform={\n                      prop.icon\n                        ? null\n                        : sidebarWidth === 275\n                          ? null\n                          : \"translateX(-70%)\"\n                    }\n                  />\n                </AccordionButton>\n                <AccordionPanel\n                  pe={ prop.icon ? null : \"0px\" }\n                  pb='8px'\n                  ps={ prop.icon ? null : sidebarWidth === 275 ? null : \"8px\" }>\n                  <List>\n                    {\n                      prop.icon\n                        ? createLinks(prop.items) // for bullet accordion links\n                        : createAccordionLinks(prop.items) // for non-bullet accordion links\n                    }\n                  </List>\n                </AccordionPanel>\n              </AccordionItem>\n            </Accordion>\n          );\n        } else {\n          return (\n            <NavLink to={ prop.layout + prop.path }>\n              { prop.icon ? (\n                <Box>\n                  <HStack spacing='14px' py='15px' px='15px'>\n                    <IconBox\n                      bg='teal.500'\n                      color='white'\n                      h='30px'\n                      w='30px'\n                      transition={ variantChange }>\n                      { prop.icon }\n                    </IconBox>\n                    <Text\n                      color={\n                        activeRoute(prop.path.toLowerCase())\n                          ? activeColor\n                          : inactiveColor\n                      }\n                      fontWeight={ activeRoute(prop.name) ? \"bold\" : \"normal\" }\n                      fontSize='sm'>\n                      { prop.name }\n                    </Text>\n                  </HStack>\n                </Box>\n              ) : (\n                // <ListItem>\n                <HStack\n                  spacing={\n                    sidebarWidth === 275\n                      ? activeRoute(prop.path.toLowerCase())\n                        ? \"22px\"\n                        : \"26px\"\n                      : \"8px\"\n                  }\n                  py='5px'\n                  px={ sidebarWidth === 275 ? \"10px\" : \"0px\" }>\n                  <Icon\n                    as={ FaCircle }\n                    w={ activeRoute(prop.path.toLowerCase()) ? \"10px\" : \"6px\" }\n                    color='teal.500'\n                    display={ sidebarWidth === 275 ? \"block\" : \"none\" }\n                  />\n                  <Text\n                    color={\n                      activeRoute(prop.path.toLowerCase())\n                        ? activeColor\n                        : inactiveColor\n                    }\n                    fontWeight={\n                      activeRoute(prop.path.toLowerCase()) ? \"bold\" : \"normal\"\n                    }>\n                    { sidebarWidth === 275 ? prop.name : prop.name[0] }\n                  </Text>\n                </HStack>\n                // </ListItem>\n              ) }\n            </NavLink>\n          );\n        }\n      }\n    });\n  };\n\n  const createAccordionLinks = (routes) => {\n    let inactiveColor = useColorModeValue(\"gray.400\", \"gray.400\");\n    let activeColor = useColorModeValue(\"gray.700\", \"white\");\n    return routes.map((prop, index) => {\n      if (!prop.hidden) {\n        return (\n          <NavLink to={ prop.layout + prop.path }>\n            <ListItem\n              pt='5px'\n              ms={ sidebarWidth === 275 ? \"26px\" : \"0px\" }\n              key={ index }>\n              <Text\n                mb='4px'\n                color={\n                  activeRoute(prop.path.toLowerCase())\n                    ? activeColor\n                    : inactiveColor\n                }\n                fontWeight={\n                  activeRoute(prop.path.toLowerCase()) ? \"bold\" : \"normal\"\n                }\n                fontSize='sm'>\n                { sidebarWidth === 275 ? prop.name : prop.name[0] }\n              </Text>\n            </ListItem>\n          </NavLink>\n        );\n      }\n    });\n  };\n  const { logoText, routes, sidebarVariant } = props;\n  let isWindows = navigator.platform.startsWith(\"Win\");\n  let links = <>{ createLinks(routes) }</>;\n  //  BRAND\n  //  Chakra Color Mode\n  let sidebarBg = \"none\";\n  let sidebarRadius = \"0px\";\n  let sidebarMargins = \"0px\";\n  if (sidebarVariant === \"opaque\") {\n    sidebarBg = useColorModeValue(\"white\", \"gray.700\");\n    sidebarRadius = \"16px\";\n    sidebarMargins = \"16px 0px 16px 16px\";\n  }\n  let brand = (\n    <Box pt={ \"25px\" } mb='12px'>\n      <Link\n        target='_blank'\n        display='flex'\n        lineHeight='100%'\n        // mb=\"30px\"\n        fontWeight=\"bold\"\n        justifyContent=\"center\"\n        alignItems=\"center\"\n        fontSize=\"11px\"\n        onClick={()=>{navigate('/admin/dashboard')}}\n      >\n        <Image src=\"/2560px-Peruri_logo.png\" alt=\"Logo Image\" h={ 55 } w={ 200 } />\n        {/* <CreativeTimLogo\n          w={sidebarWidth === 275 ? \"32px\" : \"40px\"}\n          h={sidebarWidth === 275 ? \"32px\" : \"40px\"}\n          me=\"10px\"\n        /> */}\n        {/* <Box\n          position=\"absolute\"\n          minH={{ base: \"70vh\", md: \"50vh\" }}\n          borderRadius={{ md: \"15px\" }}\n          left=\"0\"\n          right=\"0\"\n          bgRepeat=\"no-repeat\"\n          overflow=\"hidden\"\n          zIndex=\"-1\"\n\n          w={sidebarWidth === 275 ? \"32px\" : \"40px\"}\n          h={sidebarWidth === 275 ? \"32px\" : \"40px\"}\n          top=\"0\"\n          bgImage={basic}\n          bgSize=\"auto\"\n        ></Box> */}\n        {/* <Text\n          fontSize=\"xs\"\n          mt=\"3px\"\n          display={sidebarWidth === 275 ? \"block\" : \"none\"}\n        >\n          {logoText}\n        </Text> */}\n      </Link>\n      <Box\n        display='flex'\n        lineHeight='100%'\n        mb='12px'\n        fontWeight='bold'\n        justifyContent='left'\n        ml={ 4 }\n        pt={ \"25px\" }\n        alignItems='left'\n        fontSize='26px'\n        gap='8px'\n        color={ \"teal.500\" }>\n        <IconBox as='box' h={ \"30px\" } w={ \"30px\" } color={ \"teal.500\" } me='6px'>\n          <CgProfile color='inherit' w={ sidebarWidth === 275 ? \"45px\" : \"55px\" }\n            h={ sidebarWidth === 275 ? \"45px\" : \"55px\" }\n            me='10px' />\n          {/* <UserLogo\n            bg={\"teal.500\"}\n        \n          /> */}\n        </IconBox>\n        <Text\n          fontSize='xs'\n          mt='3px'\n          display={ sidebarWidth === 275 ? \"block\" : \"none\" }>\n          { JSON.parse(localStorage.getItem(\"authData\")).name } -{ \" \" }\n          { [getRoleName[JSON.parse(localStorage.getItem(\"authData\"))?.role_id]] }\n        </Text>\n      </Box>\n      <HSeparator />\n    </Box>\n  );\n\n  let user = (\n    <Box pt={ \"25px\" } mb='12px'>\n      {/* <Link\n        href={`${process.env.PUBLIC_URL}/#/`}\n        target=\"_blank\"\n        \n      > */}\n      <Box\n        display='flex'\n        lineHeight='100%'\n        mb='12px'\n        fontWeight='bold'\n        // justifyContent=\"\"\n        pt={ \"25px\" }\n        alignItems='center'\n        fontSize='16px'\n        gap='8px'>\n        <UserLogo\n          w={ sidebarWidth === 275 ? \"32px\" : \"40px\" }\n          h={ sidebarWidth === 275 ? \"32px\" : \"40px\" }\n          me='10px'\n        />\n        <Text\n          fontSize='xs'\n          mt='3px'\n          display={ sidebarWidth === 275 ? \"block\" : \"none\" }>\n          { JSON.parse(localStorage.getItem(\"authData\")).name }\n        </Text>\n      </Box>\n      {/* </Link> */ }\n      <HSeparator />\n    </Box>\n  );\n  let sidebarContent = (\n    <Box>\n      <Box mb='20px'>{ brand }</Box>\n      {/* <Box mb=\"20px\">{brand}</Box> */ }\n      <Stack direction='column' mb='40px'>\n        <Box>{ links }</Box>\n      </Stack>\n      {/* <SidebarHelp sidebarWidth={sidebarWidth}/> */ }\n    </Box>\n  );\n\n  // SIDEBAR\n  return (\n    <Box\n      ref={ mainPanel }\n      onMouseEnter={\n        toggleSidebar\n          ? () => setSidebarWidth(sidebarWidth === 120 ? 275 : 120)\n          : null\n      }\n      onMouseLeave={\n        toggleSidebar\n          ? () => setSidebarWidth(sidebarWidth === 275 ? 120 : 275)\n          : null\n      }>\n      <Box display={ { sm: \"none\", xl: \"block\" } } position='fixed'>\n        <Box\n          bg={ sidebarBg }\n          transition={ variantChange }\n          w={ `${sidebarWidth}px` }\n          ms={ {\n            sm: \"16px\",\n          } }\n          my={ {\n            sm: \"16px\",\n          } }\n          h='calc(100vh - 32px)'\n          ps='20px'\n          pe='20px'\n          m={ sidebarMargins }\n          borderRadius={ sidebarRadius }>\n          { isWindows ? (\n            <Scrollbars\n              autoHide\n              renderTrackVertical={\n                document.documentElement.dir === \"rtl\"\n                  ? renderTrackRTL\n                  : renderTrack\n              }\n              renderThumbVertical={ useColorModeValue(\n                renderThumbLight,\n                renderThumbDark\n              ) }\n              renderView={\n                document.documentElement.dir === \"rtl\"\n                  ? renderViewRTL\n                  : renderView\n              }>\n              { sidebarContent }\n            </Scrollbars>\n          ) : (\n            <Box id='sidebarScrollRemove' overflowY='scroll' height='100vh'>\n              { sidebarContent }\n            </Box>\n          ) }\n        </Box>\n      </Box>\n    </Box>\n  );\n}\n\nexport function SidebarResponsive(props) {\n  // to check for active links and opened collapses\n  let location = useLocation();\n  // this is for the rest of the collapses\n  const mainPanel = React.useRef();\n  let variantChange = \"0.2s linear\";\n  // verifies if routeName is the one active (in browser input)\n  const activeRoute = (routeName) => {\n    return location.pathname.includes(routeName);\n  };\n  // this function creates the links and collapses that appear in the sidebar (left menu)\n  const createLinks = (routes) => {\n    const { sidebarVariant } = props;\n    // Chakra Color Mode\n    let activeBg = useColorModeValue(\"teal.500\", \"teal.500\");\n    let activeAccordionBg = useColorModeValue(\"white\", \"gray.700\");\n    let inactiveBg = useColorModeValue(\"white\", \"gray.700\");\n    let inactiveColorIcon = useColorModeValue(\"teal.500\", \"teal.500\");\n    let activeColorIcon = useColorModeValue(\"white\", \"white\");\n    let activeColor = useColorModeValue(\"gray.700\", \"white\");\n    let inactiveColor = useColorModeValue(\"gray.400\", \"gray.400\");\n    // Here are all the props that may change depending on sidebar's state.(Opaque or transparent)\n    if (sidebarVariant === \"opaque\") {\n      inactiveBg = useColorModeValue(\"gray.100\", \"gray.600\");\n      activeColor = useColorModeValue(\"gray.700\", \"white\");\n      inactiveColor = useColorModeValue(\"gray.400\", \"gray.400\");\n    }\n    // console.log('create link routes: ', routes)\n    return routes.map((prop, index) => {\n      if (\n        !prop.hidden &&\n        JSON.parse(localStorage.getItem(\"authData\"))?.role_id == prop.role\n      ) {\n        if (prop.category) {\n          return (\n            <>\n              <Text\n                fontSize={ \"md\" }\n                color={ activeColor }\n                fontWeight='bold'\n                mx='auto'\n                ps={ {\n                  sm: \"10px\",\n                  xl: \"16px\",\n                } }\n                py='12px'\n                key={ index }>\n                { prop.name }\n              </Text>\n              { createLinks(prop.items) }\n            </>\n          );\n        }\n        if (prop.collapse) {\n          return (\n            <Accordion allowToggle>\n              <AccordionItem border='none'>\n                <AccordionButton\n                  display='flex'\n                  align='center'\n                  justify='center'\n                  key={ index }\n                  borderRadius='15px'\n                  _focus={ { boxShadow: \"none\" } }\n                  _hover={ { boxShadow: \"none\" } }\n                  px={ prop.icon ? null : \"0px\" }\n                  py={ prop.icon ? \"12px\" : null }\n                  bg={\n                    activeRoute(prop.path) && prop.icon\n                      ? activeAccordionBg\n                      : \"transparent\"\n                  }>\n                  { activeRoute(prop.path) ? (\n                    <Button\n                      boxSize='initial'\n                      justifyContent='flex-start'\n                      alignItems='center'\n                      bg='transparent'\n                      transition={ variantChange }\n                      mx={ {\n                        xl: \"auto\",\n                      } }\n                      px='0px'\n                      borderRadius='15px'\n                      _hover='none'\n                      w='100%'\n                      _active={ {\n                        bg: \"inherit\",\n                        transform: \"none\",\n                        borderColor: \"transparent\",\n                      } }>\n                      { prop.icon ? (\n                        <Flex>\n                          <IconBox\n                            bg={ activeBg }\n                            color={ activeColorIcon }\n                            h='30px'\n                            w='30px'\n                            me='12px'\n                            transition={ variantChange }>\n                            { prop.icon }\n                          </IconBox>\n                          <Text\n                            color={ activeColor }\n                            my='auto'\n                            fontSize='sm'\n                            display={ \"block\" }>\n                            { prop.name }\n                          </Text>\n                        </Flex>\n                      ) : (\n                        <HStack spacing={ \"22px\" } ps='10px' ms='0px'>\n                          <Icon as={ FaCircle } w='10px' color='teal.500' />\n                          <Text color={ activeColor } my='auto' fontSize='sm'>\n                            { prop.name }\n                          </Text>\n                        </HStack>\n                      ) }\n                    </Button>\n                  ) : (\n                    <Button\n                      boxSize='initial'\n                      justifyContent='flex-start'\n                      alignItems='center'\n                      bg='transparent'\n                      mx={ {\n                        xl: \"auto\",\n                      } }\n                      px='0px'\n                      borderRadius='15px'\n                      _hover='none'\n                      w='100%'\n                      _active={ {\n                        bg: \"inherit\",\n                        transform: \"none\",\n                        borderColor: \"transparent\",\n                      } }\n                      _focus={ {\n                        boxShadow: \"none\",\n                      } }>\n                      { prop.icon ? (\n                        <Flex>\n                          <IconBox\n                            bg={ inactiveBg }\n                            color={ inactiveColorIcon }\n                            h='30px'\n                            w='30px'\n                            me='12px'\n                            transition={ variantChange }>\n                            { prop.icon }\n                          </IconBox>\n                          <Text color={ inactiveColor } my='auto' fontSize='sm'>\n                            { prop.name }\n                          </Text>\n                        </Flex>\n                      ) : (\n                        <HStack spacing={ \"26px\" } ps={ \"10px\" } ms={ \"0px\" }>\n                          <Icon as={ FaCircle } w='6px' color='teal.500' />\n                          <Text\n                            color={ inactiveColor }\n                            my='auto'\n                            fontSize='md'\n                            fontWeight='normal'>\n                            { prop.name }\n                          </Text>\n                        </HStack>\n                      ) }\n                    </Button>\n                  ) }\n                  <AccordionIcon color='gray.400' />\n                </AccordionButton>\n                <AccordionPanel pe={ prop.icon ? null : \"0px\" } pb='8px'>\n                  <List>\n                    {\n                      prop.icon\n                        ? createLinks(prop.items) // for bullet accordion links\n                        : createAccordionLinks(prop.items) // for non-bullet accordion links\n                    }\n                  </List>\n                </AccordionPanel>\n              </AccordionItem>\n            </Accordion>\n          );\n        } else {\n          return (\n            <NavLink to={ prop.layout + prop.path }>\n              { prop.icon ? (\n                <Box>\n                  <HStack spacing='14px' py='15px' px='15px'>\n                    <IconBox\n                      bg='teal.500'\n                      color='white'\n                      h='30px'\n                      w='30px'\n                      transition={ variantChange }>\n                      { prop.icon }\n                    </IconBox>\n                    <Text\n                      color={\n                        activeRoute(prop.path.toLowerCase())\n                          ? activeColor\n                          : inactiveColor\n                      }\n                      fontWeight={ activeRoute(prop.name) ? \"bold\" : \"normal\" }\n                      fontSize='sm'>\n                      { prop.name }\n                    </Text>\n                  </HStack>\n                </Box>\n              ) : (\n                <ListItem>\n                  <HStack spacing='22px' py='5px' px='10px'>\n                    <Icon\n                      as={ FaCircle }\n                      w={ activeRoute(prop.path.toLowerCase()) ? \"10px\" : \"6px\" }\n                      color='teal.500'\n                    />\n                    <Text\n                      color={\n                        activeRoute(prop.path.toLowerCase())\n                          ? activeColor\n                          : inactiveColor\n                      }\n                      fontWeight={\n                        activeRoute(prop.path.toLowerCase()) ? \"bold\" : \"normal\"\n                      }>\n                      { prop.name }\n                    </Text>\n                  </HStack>\n                </ListItem>\n              ) }\n            </NavLink>\n          );\n        }\n      } else {\n        console.log(\"create link hitelse\");\n        return <></>;\n      }\n    });\n  };\n\n  const createAccordionLinks = (routes) => {\n    let inactiveColor = useColorModeValue(\"gray.400\", \"gray.400\");\n    let activeColor = useColorModeValue(\"gray.700\", \"white\");\n    return routes.map((prop, index) => {\n      return (\n        <NavLink to={ prop.layout + prop.path }>\n          <ListItem pt='5px' ms='26px' key={ index }>\n            <Text\n              color={\n                activeRoute(prop.path.toLowerCase())\n                  ? activeColor\n                  : inactiveColor\n              }\n              fontWeight={\n                activeRoute(prop.path.toLowerCase()) ? \"bold\" : \"normal\"\n              }\n              fontSize='sm'>\n              { prop.name }\n            </Text>\n          </ListItem>\n        </NavLink>\n      );\n    });\n  };\n  const { logoText, routes } = props;\n\n  var links = <>{ createLinks(routes) }</>;\n  //  BRAND\n  //  Chakra Color Mode\n  let hamburgerColor = useColorModeValue(\"gray.500\", \"gray.200\");\n  if (props.secondary === true) {\n    hamburgerColor = \"white\";\n  }\n  var brand = (\n    <Box pt={ \"35px\" } mb='8px'>\n      <Link\n        target='_blank'\n        display='flex'\n        lineHeight='100%'\n        mb='30px'\n        fontWeight='bold'\n        justifyContent='center'\n        alignItems='center'\n        fontSize='11px'>\n        {/* <CreativeTimLogo w=\"32px\" h=\"32px\" me=\"10px\" />\n        \n        */}\n        <img src='hd.jpeg' alt='logo' />\n        <Text fontSize='xs' mt='3px'>\n          { logoText }\n        </Text>\n      </Link>\n      <HSeparator />\n    </Box>\n  );\n\n  // SIDEBAR\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const btnRef = React.useRef();\n  // Color variables\n  return (\n    <Box ref={ mainPanel } display={ props.display }>\n      <Box display={ { sm: \"block\", xl: \"none\" } }>\n        <>\n          <HamburgerIcon\n            color={ hamburgerColor }\n            w='18px'\n            h='18px'\n            me='16px'\n            ref={ btnRef }\n            colorScheme='teal'\n            cursor='pointer'\n            onClick={ onOpen }\n          />\n          <Drawer\n            placement={\n              document.documentElement.dir === \"rtl\" ? \"right\" : \"left\"\n            }\n            isOpen={ isOpen }\n            onClose={ onClose }\n            finalFocusRef={ btnRef }>\n            <DrawerOverlay />\n            <DrawerContent\n              w='250px'\n              maxW='250px'\n              ms={ {\n                sm: \"16px\",\n              } }\n              my={ {\n                sm: \"16px\",\n              } }\n              borderRadius='16px'>\n              <DrawerCloseButton\n                _focus={ { boxShadow: \"none\" } }\n                _hover={ { boxShadow: \"none\" } }\n              />\n              <DrawerBody maxW='250px' px='1rem'>\n                <Box maxW='100%' h='100vh'>\n                  <Box mb='20px'>{ brand }</Box>\n                  <Stack direction='column' mb='40px'>\n                    <Box>{ links }</Box>\n                  </Stack>\n                  {/* <SidebarHelp /> */ }\n                </Box>\n              </DrawerBody>\n            </DrawerContent>\n          </Drawer>\n        </>\n      </Box>\n    </Box>\n  );\n}\n\nexport default Sidebar;\n","\"use client\";\n\nimport {\n  Box,\n  Flex,\n  Text,\n  IconButton,\n  Button,\n  Stack,\n  Collapse,\n  Icon,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  useColorModeValue,\n  useBreakpointValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport {\n  HamburgerIcon,\n  CloseIcon,\n  ChevronDownIcon,\n  ChevronRightIcon,\n} from \"@chakra-ui/icons\";\n\nimport logo from \"../../../../../assets/svg/iot-logo.svg\";\nimport flag from \"../../../../../assets/svg/flag.svg\";\n\nimport \"./Navbar.css\"\n\nimport {\n  HomeOutlined,\n  FolderOutlined,\n  CopyOutlined,\n  MenuOutlined,\n  FullscreenOutlined,\n  SearchOutlined,\n  AppstoreAddOutlined,\n} from \"@ant-design/icons\";\n\nexport default function Navbar() {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Box>\n      <Flex\n        bg={useColorModeValue(\"white\", \"#1a202c\")}\n        color={useColorModeValue(\"gray.600\", \"white\")}\n        minH={\"60px\"}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={\"solid\"}\n        borderColor={useColorModeValue(\"gray.200\", \"gray.900\")}\n        align={\"center\"}\n      >\n        <Flex\n          flex={{ base: 1, md: \"auto\" }}\n          ml={{ base: -2 }}\n          display={{ base: \"flex\", md: \"none\" }}\n        >\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant={\"ghost\"}\n            aria-label={\"Toggle Navigation\"}\n          />\n        </Flex>\n        <Flex flex={{ base: 1 }} justify={{ base: \"center\", md: \"start\" }}>\n          <Text\n            className=\"logo\"\n            textAlign={useBreakpointValue({ base: \"center\", md: \"left\" })}\n            fontFamily={\"heading\"}\n            color={useColorModeValue(\"gray.800\", \"white\")}\n          >\n            SafelinesIOT\n          </Text>\n          {/* <img src={logo} /> */}\n          <Flex display={{ base: \"none\", md: \"flex\" }} ml={10}>\n            <DesktopNav />\n          </Flex>\n        </Flex>\n\n        <Stack\n          flex={{ base: 1, md: 0 }}\n          justify={\"flex-end\"}\n          direction={\"row\"}\n          spacing={6}\n        >\n          <div className=\"header_icons\">\n            <img src={flag} />\n\n            <FullscreenOutlined style={{ fontSize: \"20px\" }} />\n            <SearchOutlined style={{ fontSize: \"20px\" }} />\n\n            <AppstoreAddOutlined style={{ fontSize: \"20px\" }} />\n          </div>\n        </Stack>\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity>\n        <MobileNav />\n      </Collapse>\n    </Box>\n  );\n}\n\nconst DesktopNav = () => {\n  const linkColor = useColorModeValue(\"gray.600\", \"gray.200\");\n  const linkHoverColor = useColorModeValue(\"gray.800\", \"white\");\n  const popoverContentBgColor = useColorModeValue(\"white\", \"gray.800\");\n\n  return (\n    <Stack direction={\"row\"} spacing={4}>\n      {NAV_ITEMS.map((navItem) => (\n        <Box key={navItem.label}>\n          <Popover trigger={\"hover\"} placement={\"bottom-start\"}>\n            <PopoverTrigger>\n              <Box\n                as=\"a\"\n                p={2}\n                href={navItem.href ?? \"#\"}\n                fontSize={\"md\"}\n                fontWeight={500}\n                color={linkColor}\n                _hover={{\n                  textDecoration: \"none\",\n                  color: linkHoverColor,\n                }}\n              >\n                {navItem.icon} {navItem.label}\n              </Box>\n            </PopoverTrigger>\n\n            {navItem.children && (\n              <PopoverContent\n                border={0}\n                boxShadow={\"xl\"}\n                bg={popoverContentBgColor}\n                p={4}\n                rounded={\"xl\"}\n                minW={\"sm\"}\n              >\n                <Stack>\n                  {navItem.children.map((child) => (\n                    <DesktopSubNav key={child.label} {...child} />\n                  ))}\n                </Stack>\n              </PopoverContent>\n            )}\n          </Popover>\n        </Box>\n      ))}\n    </Stack>\n  );\n};\n\nconst DesktopSubNav = ({ label, href, subLabel, icon }) => {\n  return (\n    <Box\n      as=\"a\"\n      href={href}\n      role={\"group\"}\n      display={\"block\"}\n      p={2}\n      rounded={\"md\"}\n      _hover={{ bg: useColorModeValue(\"pink.50\", \"gray.900\") }}\n    >\n      <Stack direction={\"row\"} align={\"center\"}>\n        <Box>\n          <Text\n            transition={\"all .3s ease\"}\n            _groupHover={{ color: \"pink.400\" }}\n            fontWeight={500}\n          >\n            {label}\n          </Text>\n          <Text fontSize={\"sm\"}>{subLabel}</Text>\n        </Box>\n        <Flex\n          transition={\"all .3s ease\"}\n          transform={\"translateX(-10px)\"}\n          opacity={0}\n          _groupHover={{ opacity: \"100%\", transform: \"translateX(0)\" }}\n          justify={\"flex-end\"}\n          align={\"center\"}\n          flex={1}\n        >\n          <Icon color={\"pink.400\"} w={5} h={5} as={ChevronRightIcon} />\n        </Flex>\n      </Stack>\n    </Box>\n  );\n};\n\nconst MobileNav = () => {\n  return (\n    <Stack\n      bg={useColorModeValue(\"white\", \"gray.800\")}\n      p={4}\n      display={{ md: \"none\" }}\n    >\n      {NAV_ITEMS.map((navItem) => (\n        <MobileNavItem key={navItem.label} {...navItem} />\n      ))}\n    </Stack>\n  );\n};\n\nconst MobileNavItem = ({ label, children, href, icon }) => {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Stack spacing={4} onClick={children && onToggle}>\n      <Box\n        py={2}\n        as=\"a\"\n        href={href ?? \"#\"}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        _hover={{\n          textDecoration: \"none\",\n        }}\n      >\n        <Text\n          fontWeight={600}\n          color={useColorModeValue(\"gray.600\", \"gray.200\")}\n        >\n          {label}\n        </Text>\n        {children && (\n          <Icon\n            as={ChevronDownIcon}\n            transition={\"all .25s ease-in-out\"}\n            transform={isOpen ? \"rotate(180deg)\" : \"\"}\n            w={6}\n            h={6}\n          />\n        )}\n      </Box>\n\n      <Collapse in={isOpen} animateOpacity style={{ marginTop: \"0!important\" }}>\n        <Stack\n          mt={2}\n          pl={4}\n          borderLeft={1}\n          borderStyle={\"solid\"}\n          borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n          align={\"start\"}\n        >\n          {children &&\n            children.map((child) => (\n              <Box as=\"a\" key={child.label} py={2} href={child.href}>\n                {child.label}\n              </Box>\n            ))}\n        </Stack>\n      </Collapse>\n    </Stack>\n  );\n};\n\nconst NAV_ITEMS = [\n  {\n    label: \"Dashboard\",\n\n    icon: <HomeOutlined style={{ fontSize: \"16px\" }} />,\n  },\n\n  {\n    label: \"Apps\",\n    href: \"#\",\n    icon: <FolderOutlined style={{ fontSize: \"16px\" }} />,\n  },\n  {\n    label: \"Pages\",\n    href: \"#\",\n    icon: <CopyOutlined style={{ fontSize: \"16px\" }} />,\n  },\n  {\n    label: \"UI\",\n    href: \"#\",\n    icon: <FolderOutlined style={{ fontSize: \"16px\" }} />,\n  },\n  {\n    label: \"Misc\",\n    icon: <MenuOutlined style={{ fontSize: \"16px\" }} />,\n    children: [\n      {\n        label: \"Component 1\",\n        // subLabel: 'Find your dream design job',\n        href: \"#\",\n      },\n      {\n        label: \"Component 2\",\n        // subLabel: 'An exclusive list for contract work',\n        href: \"#\",\n      },\n    ],\n  },\n];\n","import React from \"react\";\nimport { useColorMode } from \"@chakra-ui/react\";\nimport \"./Footer.css\";\n\nfunction Footer() {\n  const { colorMode } = useColorMode();\n  const isDarkMode = colorMode === \"dark\";\n  const textColor = isDarkMode ? \"#fff\" : \"#000\";\n  const backgroundColor = isDarkMode ? \"#1a202c\" : \"white\";\n  const footerStyle = {\n    color: textColor,\n    backgroundColor: backgroundColor,\n    width: \"100%\",\n    padding: \"20px 10px\",\n    marginTop: \"30px\",\n  };\n\n  return (\n    <>\n      <hr />\n      <div className=\"footer\" style={footerStyle}>\n        Safelines IOT © 2023\n      </div>\n    </>\n  );\n}\n\nexport default Footer;\n","import { notification } from \"antd\";\nimport axios from \"axios\";\nimport React from \"react\";\n\n// Create a new Axios instance with default config\nconst request = axios.create({\n  baseURL: \"http://iot2.us-east-1.elasticbeanstalk.com/\",\n  timeout: 10000,\n});\n\n// Add a request interceptor to add the JWT token to the Authorization header\nrequest.interceptors.request.use(\n  (config) => {\n    const token = JSON.parse(localStorage.getItem(\"authData\"))?.token;\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Add a response interceptor to handle errors\nrequest.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    const { data, status } = error.response;\n\n    if (status === 401) {\n      // Handle unauthorized error\n      // localStorage.removeItem('token');\n      // window.location.href = '/login';\n    } else if (status === 403) {\n      // Handle forbidden error\n      // window.location.href = '/403';\n    } else if (status === 404) {\n      // Handle not found error\n      // window.location.href = '/404';\n    } else if (status === 500) {\n      // Handle internal server error\n      // window.location.href = '/500';\n    } else {\n      console.error(\"API Error:\", status);\n    }\n    notification.error({ message: data?.message || \"something went wrong\" });\n    return Promise.reject({ status, data });\n  }\n);\n\nexport default request;\n","import request from \"./request\";\n\n// export const getSensorsData = async () => {\n//   const res = await request.get(\"AWS/GetSensorsData\");\n//   return res;\n// };\nexport const getSensorsData = async () => {\n  const urlParams = new URLSearchParams(window.location.search);\n  const systemId = urlParams.get(\"systemId\");\n  if (!systemId) {\n    const res = await request.get(\"AWS/GetSensorsData\");\n    return res;\n  }\n  const res = await request.get(`AWS/GetSensorsData?departmentId=${systemId}`);\n  return res;\n};\ngetSensorsData();\n\n// export const getSensorsDataHCCAP = async () => {\n//   const res = await request.get(\"/AWS/GetAllSensorsData\");\n//   return res;\n// };\n\n//\n\n// export const getSensorsDataHCCAP = async () => {\n//   const urlParams = new URLSearchParams(window.location.search);\n//   const systemId = urlParams.get(\"systemId\");\n//   if (!systemId) {\n//     const res = await request.get(\"/AWS/GetAllSensorsData\");\n//     return res;\n//   }\n//   const res = await request.get(\n//     `/AWS/GetAllSensorsData?departmentId=${systemId}`\n//   );\n//   return res;\n// };\n// getSensorsDataHCCAP(data);\nexport const getSensorsDataHCCAP = async ({ date, day }) => {\n  var now_utc = date.toISOString();\n  const urlParams = new URLSearchParams(window.location.search);\n  const systemId = urlParams.get(\"systemId\");\n  if (!systemId) {\n    const res = await request.get(\n      `/AWS/GetAllSensorsData?DepartmentId=24&NoOfDays=${day}&Interval=3&SelectedDate=${now_utc}`\n    );\n    console.log(\"data>>>>>\", res);\n    return res;\n  }\n  const res = await request.get(\n    `/AWS/GetAllSensorsData?DepartmentId=${systemId}&NoOfDays=${day}&Interval=3&SelectedDate=${now_utc}`\n  );\n  console.log(\"data>>>>>\", res);\n  return res;\n};\nexport const getSensorDataById = async (sensorId, sensorName, startDate , endedDate) => {\n  const res = await request.get(\n    `/AWS/GetSensorDataById?SensorId=${sensorId}&SesnsorName=${sensorName}&SelectedDate=${startDate}&EndedDate=${endedDate}`\n  );\n  return res;\n};\n","export const series = (data) => {\n  let yoLo = data?.data?.map((item, index) => {\n    return [new Date(item[0]).getTime(), Number(item[1])];\n  });\n  return [\n    {\n      name: data?.name,\n      yaxis: [\n        {\n          min: data?.yaxis?.[0].min,\n          max: data?.yaxis?.[0].max,\n        },\n      ],\n\n      data: yoLo,\n    },\n  ];\n};\n\nexport const options = {\n  chart: {\n    type: \"area\",\n    stacked: false,\n    height: 350,\n    zoom: {\n      type: \"x\",\n      enabled: true,\n      autoScaleYaxis: true,\n    },\n    toolbar: {\n      autoSelected: \"false\",\n    },\n  },\n  dataLabels: {\n    enabled: false,\n  },\n  markers: {\n    size: 0,\n  },\n  title: {\n    text: \"Temperature\",\n    align: \"left\",\n    style: {\n      color: \"#94A3B8\",\n    },\n  },\n  fill: {\n    type: \"gradient\",\n    gradient: {\n      shadeIntensity: 1,\n      inverseColors: false,\n      opacityFrom: 0.5,\n      opacityTo: 0,\n      stops: [0, 100],\n    },\n  },\n  yaxis: {\n    show: true,\n    labels: {\n      formatter: function (val) {\n        return val;\n      },\n      style: {\n        colors: \"white\",\n      },\n    },\n    title: {\n      style: {\n        color: \"white\",\n      },\n    },\n  },\n  xaxis: {\n    min: new Date(\"2023-08-14T00:00:00\").getTime(),\n    max: new Date(\"2023-08-15T10:00:00\").getTime(),\n    type: \"datetime\",\n    timezone: \"browser\",\n    labels: {\n      format: \"HH:mm\",\n      style: {\n        colors: \"white\",\n      },\n    },\n  },\n  tooltip: {\n    shared: false,\n    theme: \"dark\",\n    x: {\n      format: \"dd-MMM-yyyy HH:mm:ss\",\n    },\n    y: {\n      formatter: function (val) {\n        return val;\n      },\n    },\n  },\n};\n","import React from \"react\";\nimport \"./BlueGraph.css\";\nimport ReactApexChart from \"react-apexcharts\";\nimport { series } from \"variables/AreaData\";\nimport { options } from \"variables/AreaData\";\nimport { Skeleton } from \"antd\";\nfunction BlueGraph({ sensorId, sensorsData, loading }) {\n  return (\n    <div className=\"blue-top\">\n      <div className=\"main-container\">\n        {loading ? (\n          <Skeleton active paragraph={{ rows: 3 }} />\n        ) : (\n          <>\n            <div className=\"container\">\n              {/* <p>GH-Basement Meat Dishwasher 6221391</p> */}\n              <p>{sensorId}</p>\n            </div>\n            <div id=\"chart\">\n              <ReactApexChart\n                options={options}\n                series={series(sensorsData)}\n                type=\"area\"\n                height={350}\n              />\n            </div>\n          </>\n        )}\n      </div>\n    </div>\n  );\n}\nexport default BlueGraph;\n","import React, { useState, useEffect } from \"react\";\nimport { Table } from \"antd\";\nimport { getSensorsDataHCCAP } from \"services/sensor\";\n\nconst ReportTable = () => {\n  const [loading, setLoading] = useState(\"false\");\n  const [hccpColumns, setHccpColumns] = useState([]);\n  const [hccpData, setHccpData] = useState([]);\n  useEffect(() => {\n    setLoading(true);\n    getSensorsDataHCCAP()\n      .then((res) => {\n        setLoading(false);\n        let columm = [\"Sensor Name\", ...res?.data?.[0]?.columns];\n\n        setHccpColumns(\n          columm?.map((item, index) => {\n            return {\n              title: item === \"Sensor Name\" ? item : `${item}:00`,\n              dataIndex: item === \"Sensor Name\" ? \"title\" : item,\n            };\n          })\n        );\n        res?.data.shift();\n        setHccpData(res?.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n      });\n  }, []);\n  return (\n    <>\n      <Table columns={hccpColumns} dataSource={hccpData} loading={loading} />\n    </>\n  );\n};\nexport default ReportTable;\n","import React from \"react\";\nimport { Table, Tag } from \"antd\";\n\nconst columns = [\n  {\n    title: \"Raised\",\n    dataIndex: \"Raised\",\n    key: \"name\",\n    render: (text) => <a>{text}</a>,\n  },\n  {\n    title: \"Device\",\n    dataIndex: \"Device\",\n    key: \"age\",\n  },\n\n  {\n    title: \"Severity\",\n    key: \"tags\",\n    dataIndex: \"Severity\",\n    render: (_, { Severity }) => (\n      <>\n        {Severity.map((tag) => {\n          let color = tag.length > 5 ? \"geekblue\" : \"green\";\n          if (tag === \"Alram\") {\n            color = \"red\";\n          }\n          return (\n            <Tag color={color} key={tag}>\n              {tag.toUpperCase()}\n            </Tag>\n          );\n        })}\n      </>\n    ),\n  },\n];\nconst data = [\n  {\n    key: \"1\",\n    Raised: \"2023-07-27 12:14\",\n    Device: \"-80 Freezer 9824512\",\n    Severity: [\"Alram\"],\n  },\n  {\n    key: \"2\",\n    Raised: \"2023-07-27 12:14\",\n    Device: \"-80 Freezer 9824512\",\n    Severity: [\"Alram\"],\n  },\n  {\n    key: \"3\",\n    Raised: \"2023-07-27 12:14\",\n    Device: \"-80 Freezer 9824512\",\n    Severity: [\"Alram\"],\n  },\n  {\n    key: \"4\",\n    Raised: \"2023-07-27 12:14\",\n    Device: \"-80 Freezer 9824512\",\n    Severity: [\"Alram\"],\n  },\n  {\n    key: \"5\",\n    Raised: \"2023-07-27 12:14\",\n    Device: \"-80 Freezer 9824512\",\n    Severity: [\"Alram\"],\n  },\n];\n// const [show, setShow] = useState(true);\n\nconst NotificationTable = () => {\n  return (\n    <div>\n      {/* <Badge count={show ? 25 : 0} /> */}\n      <Table columns={columns} dataSource={data} />\n    </div>\n  );\n};\n\nexport default NotificationTable;\n","import React from \"react\";\nimport { Flex, useColorModeValue, useColorMode } from \"@chakra-ui/react\";\n\nimport \"./status.css\";\nfunction Status({ textColor, bgColor, icon, text, value }) {\n  const { colorMode } = useColorMode();\n  const dynamicBackgroundColor =\n    colorMode === \"light\" ? bgColor : useColorModeValue(\"#fff\", \"#1E293B\");\n\n  const statusCardStyle = {\n    backgroundColor: dynamicBackgroundColor,\n    color: textColor,\n  };\n\n  return (\n    <div className=\"status__card\" style={statusCardStyle}>\n      <div className=\"status\">\n        <h1 className=\"status__count\">{value}</h1>\n        <div className=\"status__name\">\n          <img src={icon} alt=\"status icon\" />\n          <span>{text}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Status;\n","export default __webpack_public_path__ + \"static/media/signal.dfed4855.svg\";","export default __webpack_public_path__ + \"static/media/alarm.512335b9.svg\";","export default __webpack_public_path__ + \"static/media/tick.1cce4466.svg\";","export default __webpack_public_path__ + \"static/media/warning.7562d243.svg\";","import React from \"react\";\nimport { Box, Text, useColorModeValue } from \"@chakra-ui/react\";\n\nimport ReactApexChart from \"react-apexcharts\";\nimport \"./Graph.css\";\nfunction Graph() {\n  const series = [\n    {\n      name: \"Bagot Ward Pantry fridge\",\n      data: [31, 40, 28, 51, 42, 109, 100],\n    },\n    {\n      name: \"Bagot Ward Pantry fridge\",\n      data: [11, 32, 45, 32, 34, 52, 41],\n    },\n  ];\n  const options = {\n    chart: {\n      height: 350,\n      type: \"area\",\n    },\n    dataLabels: {\n      enabled: false,\n    },\n    stroke: {\n      curve: \"smooth\",\n    },\n    xaxis: {\n      type: \"datetime\",\n      categories: [\n        \"2018-09-19T00:00:00.000Z\",\n        \"2018-09-19T01:30:00.000Z\",\n        \"2018-09-19T02:30:00.000Z\",\n        \"2018-09-19T03:30:00.000Z\",\n        \"2018-09-19T04:30:00.000Z\",\n        \"2018-09-19T05:30:00.000Z\",\n        \"2018-09-19T06:30:00.000Z\",\n      ],\n      style: {\n        color: \"white\",\n      },\n    },\n    yaxis: {\n      show: false,\n    },\n    tooltip: {\n      theme: \"dark\",\n      x: {\n        format: \"dd/MM/yy HH:mm\",\n      },\n    },\n  };\n\n  return (\n    <div className=\"top\">\n      <Box className=\"main\" bg={useColorModeValue(\"#fff\", \"#1E293B\")}>\n        <Box\n          className=\"container-graph\"\n          // Adjust color values based on your theme\n        >\n          <Text style={{ color: useColorModeValue(\"black\", \"white\") }}>\n            2 Devices\n          </Text>\n          <div className=\"context\">\n            <Text style={{ color: useColorModeValue(\"#94A3B8\", \"white\") }}>\n              Bagot Ward Pantry fridge\n            </Text>\n            <Text style={{ color: useColorModeValue(\"#94A3B8\", \"white\") }}>\n              Bagot Ward Pantry fridge\n            </Text>\n          </div>\n        </Box>\n        <Box className=\"graph\">\n          <ReactApexChart\n            options={options}\n            series={series}\n            type=\"area\"\n            height={350}\n          />\n        </Box>\n      </Box>\n    </div>\n  );\n}\n\nexport default Graph;\n","\n\nimport { Box, useStyleConfig } from \"@chakra-ui/react\";\nfunction Card(props) {\n  const { variant, children, ...rest } = props;\n  const styles = useStyleConfig(\"Card\", { variant });\n  return (\n    <Box __css={styles} {...rest}>\n      {children}\n    </Box>\n  );\n}\n\nexport default Card;\n","\n\nimport { Box, useStyleConfig } from \"@chakra-ui/react\";\nfunction CardBody(props) {\n  const { variant, children, ...rest } = props;\n  const styles = useStyleConfig(\"CardBody\", { variant });\n  return (\n    <Box __css={styles} {...rest}>\n      {children}\n    </Box>\n  );\n}\n\nexport default CardBody;\n","export default __webpack_public_path__ + \"static/media/Battery.1affb5b4.svg\";","import React from \"react\";\nimport ReactApexChart from \"react-apexcharts\";\n\nclass DonutChart extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      chartData: [],\n      chartOptions: {},\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      chartData: this.props.chartData,\n      chartOptions: this.props.chartOptions,\n    });\n  }\n\n  render() {\n    return (\n      <ReactApexChart\n        options={this.state.chartOptions}\n        series={this.state.chartData}\n        type=\"radialBar\"\n      />\n    );\n  }\n}\n\nexport default DonutChart;\n","export const calculatePercentage = (minValue, maxValue, currentValue) => {\n  const range = maxValue - minValue;\n  const difference = currentValue - minValue;\n  const fraction = difference / range;\n  const percentage = fraction * 100;\n  return percentage.toFixed(2);\n};\n\nexport const donutChartOptionsCharts1 = ({ maxColor, textColor }) => {\n  return {\n    chart: {\n      height: 580,\n      width: 200,\n      type: \"radialBar\",\n    },\n    colors: [maxColor],\n    plotOptions: {\n      radialBar: {\n        hollow: {\n          margin: 15,\n          size: \"60%\",\n        },\n\n        dataLabels: {\n          showOn: \"always\",\n          name: {\n            offsetY: -10,\n            show: true,\n            color: maxColor,\n            fontSize: \"13px\",\n          },\n          value: {\n            color: maxColor,\n            fontSize: \"20px\",\n            show: true,\n            formatter: function (val) {\n              return val + \"%\";\n            },\n          },\n        },\n      },\n    },\n    track: {\n      dropShadow: {\n        enabled: true,\n        top: 2,\n        left: 0,\n        blur: 4,\n        opacity: 0.15,\n      },\n    },\n    stroke: {\n      lineCap: \"round\",\n    },\n    labels: [\"Progress\"],\n  };\n};\n\nexport const donutChartDataCharts1 = (maxValue, minValue, currentValue) => {\n  if (maxValue < 0 && minValue < 0 && currentValue < 0) {\n    return [calculatePercentage(-minValue, -maxValue, -currentValue)];\n  } else {\n    return [calculatePercentage(minValue, maxValue, currentValue)];\n  }\n};\n// export function getTimeDifference(currentTime, previousTime) {\n//   const standardizedReadingDateString = previousTime.slice(0, 23).replace(\" \", \"T\") + \"Z\";\n//   previousTime = new Date(standardizedReadingDateString);\n//   previousTime = new Date(previousTime);\n//   currentTime  = Date.UTC(currentTime.getUTCFullYear(), currentTime.getUTCMonth(), currentTime.getUTCDate(), currentTime.getUTCHours(), currentTime.getUTCMinutes(), currentTime.getUTCSeconds());\n//   previousTime = Date.UTC(previousTime.getUTCFullYear(), previousTime.getUTCMonth(), previousTime.getUTCDate(), previousTime.getUTCHours(), previousTime.getUTCMinutes(), previousTime.getUTCSeconds());\n//   const timeDifference = currentTime - previousTime;\n\n//   const seconds = Math.floor(timeDifference / 1000);\n//   const minutes = Math.floor(seconds / 60);\n//   const hours = Math.floor(minutes / 60);\n//   const days = Math.floor(hours / 24);\n\n//   if (days > 0) {\n//     return `${days} day${days > 1 ? \"s\" : \"\"} ago`;\n//   } else if (hours > 0) {\n//     return `${hours} hour${hours > 1 ? \"s\" : \"\"} ago`;\n//   } else if (minutes > 0) {\n//     return `${minutes} minute${minutes > 1 ? \"s\" : \"\"} ago`;\n//   } else {\n//     return `${seconds} second${seconds !== 1 ? \"s\" : \"\"} ago`;\n//   }\n// }\nexport function getTimeDifference(currentTime, previousTime) {\n  // Convert previousTime to a Date object\n  previousTime = new Date(previousTime);\n\n  // Convert currentTime to a UTC timestamp\n  currentTime = Date.UTC(\n    currentTime.getUTCFullYear(),\n    currentTime.getUTCMonth(),\n    currentTime.getUTCDate(),\n    currentTime.getUTCHours(),\n    currentTime.getUTCMinutes(),\n    currentTime.getUTCSeconds()\n  );\n\n  // Convert previousTime to a UTC timestamp\n  const previousTimestamp = Date.UTC(\n    previousTime.getUTCFullYear(),\n    previousTime.getUTCMonth(),\n    previousTime.getUTCDate(),\n    previousTime.getUTCHours(),\n    previousTime.getUTCMinutes(),\n    previousTime.getUTCSeconds()\n  );\n\n  const timeDifference = currentTime - previousTimestamp;\n\n  const seconds = Math.floor(timeDifference / 1000);\n  const minutes = Math.floor(seconds / 60);\n  const hours = Math.floor(minutes / 60);\n  const days = Math.floor(hours / 24);\n\n  if (days > 0) {\n    return `${days} day${days > 1 ? \"s\" : \"\"} ago`;\n  } else if (hours > 0) {\n    return `${hours} hour${hours > 1 ? \"s\" : \"\"} ago`;\n  } else if (minutes > 0) {\n    return `${minutes} minute${minutes > 1 ? \"s\" : \"\"} ago`;\n  } else {\n    return `${seconds} second${seconds !== 1 ? \"s\" : \"\"} ago`;\n  }\n}\nexport const options1 = ({ max, min, temp }) => {\n  return {\n    chart: {\n      height: 800,\n      type: \"radialBar\",\n    },\n    series: [temp],\n    colors: [\"#20E647\"],\n    plotOptions: {\n      radialBar: {\n        startAngle: -135,\n        endAngle: 135,\n        track: {\n          background: \"#333\",\n          startAngle: -135,\n          endAngle: 135,\n        },\n        dataLabels: {\n          name: {\n            show: true,\n          },\n          value: {\n            fontSize: \"30px\",\n            show: true,\n          },\n        },\n      },\n    },\n    fill: {\n      type: \"gradient\",\n      gradient: {\n        shade: \"dark\",\n        type: \"horizontal\",\n        gradientToColors: [\"#87D4F9\"],\n        stops: [min, max],\n      },\n    },\n    stroke: {\n      lineCap: \"butt\",\n    },\n    labels: [\"Progress\"],\n  };\n};\n","import React from \"react\";\nimport GaugeChart from \"react-gauge-chart\";\nimport \"./Gauge.css\";\nimport { calculatePercentage } from \"variables/DonutData\";\nconst Gauge = ({ minValue, maxValue, currentValue }) => {\n  const safeCurrentValue = Math.min(Math.max(currentValue, minValue), maxValue);\n  const percentage = (currentValue - minValue) / (maxValue - minValue);\n  const percen = calculatePercentage(minValue, maxValue, currentValue);\n  console.log(\"re\", percen);\n  return (\n    <div\n      style={{ display: \"flex\", flexDirection: \"column\", alignItems: \"center\" }}\n    >\n      <div>\n        <GaugeChart\n          id=\"gauge-chart2\"\n          nrOfLevels={20}\n          //   percent={percentage}\n          // colors={[\"#3498db\"]}\n          colors={[\"#2ECC71\", \"#ca0035\"]}\n          arcWidth={0.3}\n          percent={percentage}\n          needleColor=\"#BFC9CA\"\n          style={{ height: \"190px\", width: \"330px\" }}\n        />\n      </div>\n      <div className=\"text\">\n        <div className=\"Min-Max \">\n          <span>\n            {minValue} <span>&#8451;</span>\n          </span>\n          <span>\n            {currentValue} <span>&#8451;</span>\n          </span>\n          <span>\n            {maxValue} <span>&#8451;</span>\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default Gauge;\n","import { Flex, Box, Text, Divider, useColorModeValue } from \"@chakra-ui/react\";\nimport Card from \"components/Card/Card\";\nimport CardBody from \"components/Card/CardBody\";\nimport DonutChart from \"components/Charts/DonutChart\";\nimport Battery from \"assets/svg/Battery.svg\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  donutChartDataCharts1,\n  donutChartOptionsCharts1,\n} from \"variables/DonutData\";\nimport \"./donut.css\";\nimport { getTimeDifference } from \"variables/DonutData\";\nimport { Skeleton } from \"antd\";\nimport { useNavigate } from \"react-router-dom\";\nimport Gauge from \"../Gauge/Gauge\";\nimport { getSensorsData } from \"services/sensor\";\nfunction Donut() {\n  const [sensorData, setSensorData] = useState();\n\n  const [loadingDonut, setLoadingDonut] = useState(false);\n\n  const sensorListing = () => {\n    setLoadingDonut(true);\n    getSensorsData()\n      .then((res) => {\n        setLoadingDonut(false);\n        let data = res?.data?.map((item) => {\n          return {\n            ...item,\n            temperature: Number(item?.temperature?.[0]),\n          };\n        });\n        setSensorData(data);\n      })\n      .catch((err) => {\n        setLoadingDonut(false);\n      });\n  };\n  useEffect(() => {\n    sensorListing();\n    const interval = setInterval(() => {\n      sensorListing();\n    }, 120000);\n\n    return () => clearInterval(interval);\n  }, []);\n  const hour = useColorModeValue(\"#64748B\", \"white\");\n  const batteryColor = useColorModeValue(\"black\", \"white\");\n  const navi = useNavigate();\n  return (\n    <div className=\"card-top\">\n      <Flex flexWrap=\"wrap\" style={{ gap: \"50px\", flexWrap: \"wrap\" }} mb={10}>\n        {loadingDonut ? (\n          <>\n            <Card\n              w={{\n                base: \"100%\",\n                sm: \"100%\",\n                md: \"calc(50% - 10px)\",\n                lg: \"calc(25% - 15px)\",\n              }}\n              backgroundColor={useColorModeValue(\"white\", \"#1E293B\")}\n              cursor={\"pointer\"}\n            >\n              <CardBody w=\"100%\" h=\"100%\">\n                <Skeleton active paragraph={{ rows: 3 }} />\n              </CardBody>\n              <Box className=\"max-min\"></Box>\n              <Divider />\n              <Box className=\"reading-footer\"></Box>\n            </Card>\n            <Card\n              w={{\n                base: \"100%\",\n                sm: \"100%\",\n                md: \"calc(50% - 10px)\",\n                lg: \"calc(25% - 15px)\",\n              }}\n              backgroundColor={useColorModeValue(\"white\", \"#1E293B\")}\n              cursor={\"pointer\"}\n            >\n              <CardBody w=\"100%\" h=\"100%\">\n                <Skeleton active paragraph={{ rows: 3 }} />\n              </CardBody>\n              <Box className=\"max-min\"></Box>\n              <Divider />\n              <Box className=\"reading-footer\"></Box>\n            </Card>\n          </>\n        ) : (\n          sensorData?.map((item, index) => (\n            <Card\n              key={index}\n              w={{\n                base: \"100%\",\n                sm: \"100%\",\n                md: \"calc(50% - 10px)\",\n                lg: \"calc(25% - 15px)\",\n              }}\n              onClick={() => {\n                navi(`/admin/show-graph?sensorId=${item.sensorId}`);\n              }}\n              backgroundColor={useColorModeValue(\"white\", \"#1E293B\")}\n              cursor={\"pointer\"}\n            >\n              <Box className=\"reading-header\">\n                <Text>{item?.sensorId}</Text>\n                {item?.humidity && (\n                  <Text\n                    className=\"reading\"\n                    backgroundColor={useColorModeValue(\"#00BBD3\", \"#2C3E5A\")}\n                  >\n                    {item?.humidity}\n                  </Text>\n                )}\n              </Box>\n\n              <CardBody w=\"100%\" h=\"100%\">\n                {/* <DonutChart\n                  chartData={donutChartDataCharts1(\n                    item?.maxValue,\n                    item?.minValue,\n                    item?.temperature\n                  )}\n                  chartOptions={donutChartOptionsCharts1({\n                    maxColor:\n                      item?.temperature < 5\n                        ? useColorModeValue(\"#DD6B20\", \"#DD6B20\")\n                        : useColorModeValue(\"#3182CE\", \"#3182CE\"),\n                    textColor: useColorModeValue(\"white\", \"black\"),\n                  })}\n                /> */}\n                <Gauge\n                  minValue={item?.minValue}\n                  maxValue={item?.maxValue}\n                  currentValue={item?.temperature}\n                />\n              </CardBody>\n              <Box className=\"max-min\">\n                <Flex className=\"max\" direction=\"row\">\n                  <Text className=\"max-heading\">Max</Text>\n                  <Text>{item.maxValue}</Text>\n                </Flex>\n                <Flex className=\"min\" direction=\"row\">\n                  <Text className=\"min-heading\">Min</Text>\n                  <Text>{item.minValue}</Text>\n                </Flex>\n              </Box>\n              <Divider />\n              <Box className=\"reading-footer\">\n                <Text\n                  className=\"tempreture\"\n                  color={\n                    item?.temperature < 5\n                      ? useColorModeValue(\"#F6AD55\", \"#F6AD55\")\n                      : useColorModeValue(\"#63B3ED\", \"#63B3ED\")\n                  }\n                >\n                  {item?.temperature}\n                  <sup>&#176;</sup>C\n                </Text>\n                <Text className=\"hours\" color={hour}>\n                  {getTimeDifference(new Date(), item?.readingDateTime)}\n                </Text>\n                <Flex className=\"battery\" align=\"center\">\n                  <img src={Battery} alt=\"\" style={{ color: \"#64748b\" }} />\n                  <Text\n                    className=\"percentage\"\n                    color={useColorModeValue(\"#64748b\", \"white\")}\n                  >\n                    {item?.battery}\n                  </Text>\n                </Flex>\n              </Box>\n            </Card>\n          ))\n        )}\n      </Flex>\n    </div>\n  );\n}\n\nexport default Donut;\n","import React, { useEffect } from \"react\";\nimport { DeleteIcon } from \"@chakra-ui/icons\";\nimport { Box, Text, IconButton, Flex, VStack } from \"@chakra-ui/react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    height:\"100%\",\n    background: \"white\"\n  },\n  header: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0.5rem\",\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  body: {\n    padding: \"0.5rem\",\n    flexGrow: 1,\n  },\n});\n\nconst widgetNames = {\n  a: \"Charts\",\n  b: \"HACCP Report \",\n  c: \"Notification\",\n  d: \"D\",\n};\nexport default function Widget({ id, onRemoveItem, ComponentList }) {\n   const classes = useStyles();\n  return (\n    <Box\n      borderWidth=\"1px\"\n      borderRadius=\"md\"\n      p={4}\n      boxShadow=\"base\"\n      className={classes.root}\n    >\n      <div spacing={2} align=\"start\" className={classes.header}>\n        <Text fontSize=\"lg\">{widgetNames[id]}</Text>\n        <Flex justify=\"flex-end\" w=\"100%\" className={classes.spacer}>\n          <IconButton\n            aria-label=\"delete\"\n            variant=\"ghost\"\n            colorScheme=\"red\"\n            icon={<DeleteIcon />}\n            onClick={() => onRemoveItem(id)}\n          />\n        </Flex>\n      </div>\n      <ComponentList className={classes.root} />\n      <div className={classes.body} />\n    </Box>\n  );\n}\n","// AddList component\nimport React, { useState } from \"react\";\nimport { Flex, Icon } from \"@chakra-ui/react\";\nimport { HiDocumentReport, HiChartBar, HiBell } from \"react-icons/hi\";\nimport { getSensorsData } from \"services/sensor\";\nimport { Select } from \"@chakra-ui/react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n} from \"@chakra-ui/react\";\nconst widgetNames = {\n  a: \"CHARTS\",\n  b: \"HCCP REPORT\",\n  c: \"NOTIFICATION\",\n};\n\nconst widgetIcons = {\n  a: <Icon as={HiDocumentReport} boxSize={5} color=\"#ed537c\" />,\n  b: <Icon as={HiChartBar} boxSize={5} color=\"#5398ed\" />,\n  c: <Icon as={HiBell} boxSize={5} color=\"#f5da58\" />,\n};\nexport default function AddList({ onAddItem }) {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [inputData, setInputData] = useState({\n    maxValue: \"\",\n    minValue: \"\",\n    temperature: \"\",\n    battery: \"\",\n  });\n  const handleAddWidget = (widgetId) => {\n    onAddItem(widgetId);\n  };\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n  const handleSave = () => {\n    setInputData({\n      maxValue: \"\",\n      minValue: \"\",\n      temperature: \"\",\n      battery: \"\",\n    });\n    handleCloseModal();\n    console.log(\"I am save button\", setInputData);\n  };\n  return (\n    <Flex align=\"center\" gap=\"5px\">\n      <button\n        key=\"a\"\n        onClick={() => {\n          handleAddWidget(\"a\");\n          // handleOpenModal();\n        }}\n        marginRight={2}\n        className=\"widgetButton\"\n      >\n        <div>\n          <Flex alignItems=\"center\" gap=\"1px\">\n            <div className=\"icon\">{widgetIcons[\"a\"]}</div>\n            <div>{widgetNames[\"a\"]}</div>\n          </Flex>\n        </div>\n      </button>\n      <button\n        key=\"b\"\n        className=\"widgetButton\"\n        onClick={() => handleAddWidget(\"b\")}\n        marginRight={2}\n      >\n        <div>\n          <Flex alignItems=\"center\" gap=\"1px\">\n            <div className=\"icon\">{widgetIcons[\"b\"]}</div>\n            <div>{widgetNames[\"b\"]}</div>\n          </Flex>\n        </div>\n      </button>\n      <button\n        key=\"c\"\n        className=\"widgetButton\"\n        onClick={() => handleAddWidget(\"c\")}\n        marginRight={2}\n      >\n        <div>\n          <Flex alignItems=\"center\" gap=\"1px\">\n            <div className=\"icon\">{widgetIcons[\"c\"]}</div>\n            <div> {widgetNames[\"c\"]}</div>\n          </Flex>\n        </div>\n      </button>\n\n      {/* <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Chart Modal</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Select\n              placeholder=\"Select an option\"\n              value={inputData.selectedOption}\n              onChange={(e) =>\n                setInputData({ ...inputData, selectedOption: e.target.value })\n              }\n            >\n              <option value=\"option1\">Option 1</option>\n              <option value=\"option2\">Option 2</option>\n              <option value=\"option3\">Option 3</option>\n            </Select>\n          </ModalBody>\n        </ModalContent>\n      </Modal> */}\n    </Flex>\n  );\n}\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Checkbox, FormControl, Box, Flex, Text, Icon ,IconButton ,Button ,Center } from \"@chakra-ui/react\";\n// import IconButton from \"@material-ui/core/IconButton\";\nimport { FaSave } from \"react-icons/fa\";\nimport { CheckIcon } from \"@chakra-ui/icons\";\nimport AddList from \"./AddList.js\";\nimport { SaveFilled } from \"@ant-design/icons\";\nimport { NoToneMapping } from \"three\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(1),\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n}));\nexport default function TopBar({\n  onLayoutSave,\n  items,\n  onRemoveItem,\n  onAddItem,\n  originalItems,\n}) {\n  const classes = useStyles();\n  return (\n    <Card className={classes.root}>\n      <AddList\n        items={items}\n        onRemoveItem={onRemoveItem}\n        onAddItem={onAddItem}\n        originalItems={originalItems}\n      />\n      <button className=\"save\" onClick={onLayoutSave}>\n        <Flex alignItems=\"center\" justifyContent=\"center\">\n          <IconButton\n            marginRight={1}\n            aria-label=\"save\"\n            size=\"xs\"\n            icon={\n              <Icon\n                as={FaSave}\n                boxSize={5}\n                style={{ color: \"white\"}}\n              />\n            }\n          />\n          <Text>Save</Text>\n        </Flex>\n      </button>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"react-grid-layout/css/styles.css\";\nimport \"react-resizable/css/styles.css\";\nimport \"./GridStack.css\";\nimport { Box, Text, IconButton, Button, Flex, VStack } from \"@chakra-ui/react\";\nimport { Responsive as ResponsiveGridLayout } from \"react-grid-layout\";\nimport { withSize } from \"react-sizeme\";\nimport { FaFileAlt, FaChartBar, FaBell } from \"react-icons/fa\";\nimport ReportTable from \"../ReportTable/ReportTable\";\nimport Donut from \"../DonutCharts/Donut\";\nimport Widget from \"./Widget\";\nimport TopBar from \"./Topbar\";\nimport NotificationTable from \"../NotificationTable/NotificationTable\";\nimport { Switch } from \"@chakra-ui/react\";\nimport { FaPencilAlt } from \"react-icons/fa\";\nconst GridStackComponent = ({ size: { width }, isOn }) => {\n  const originalItems = [\"a\", \"b\", \"c\"];\n\n  const initialLayouts = {\n    lg: [\n      { i: \"a\", x: 0, y: 0, w: 1, h: 2 },\n      { i: \"b\", x: 1, y: 0, w: 3, h: 2 },\n      { i: \"c\", x: 4, y: 0, w: 1, h: 2 },\n      { i: \"d\", x: 0, y: 2, w: 2, h: 2 },\n    ],\n  };\n\n  const componentList = {\n    a: Donut,\n    b: ReportTable,\n    c: NotificationTable,\n    d: Donut,\n  };\n  const [items, setItems] = useState(originalItems);\n  const [layouts, setLayouts] = useState(\n    getFromLS(\"layouts\") || initialLayouts\n  );\n  const onLayoutChange = (_, allLayouts) => {\n    setLayouts(allLayouts);\n  };\n  const onLayoutSave = () => {\n    saveToLS(\"layouts\", layouts);\n  };\n  const onRemoveItem = (itemId) => {\n    setItems(items.filter((i) => i !== itemId));\n  };\n  const onAddItem = (itemId) => {\n    setItems([...items, itemId]);\n  };\n  const onAddDynamicItem = () => {\n    const newItemId = `dynamic-${Math.random()}`;\n    setItems([...items, newItemId]);\n    setLayouts((prevLayouts) => ({\n      ...prevLayouts,\n      lg: [\n        ...prevLayouts.lg,\n        { i: newItemId, x: 0, y: 0, w: 2, h: 4 }, // You can adjust these values\n      ],\n    }));\n  };\n  const onAddComponent = () => {\n    const newLayout = {\n      i: Date.now().toString(), // Generate a unique ID for the new component\n      x: 0,\n      y: Infinity, // Puts the component at the bottom\n      w: 2,\n      h: 4,\n    };\n\n    setLayouts((prevLayouts) => [...prevLayouts, newLayout]);\n  };\n  return (\n    <div>\n      <Flex alignItems={\"center\"}>\n        <div className=\"editWidgets\">\n          {isOn && (\n            <>\n              <TopBar\n                onLayoutSave={onLayoutSave}\n                items={items}\n                onRemoveItem={onRemoveItem}\n                onAddItem={onAddItem}\n                originalItems={originalItems}\n              />\n            </>\n          )}\n        </div>\n      </Flex>\n      <ResponsiveGridLayout\n        className=\"layout\"\n        layouts={layouts}\n        breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}\n        cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\n        rowHeight={60}\n        width={width}\n        onLayoutChange={onLayoutChange}\n      >\n        {items.map((key, index) => (\n          <div\n            key={`${key}-${index}`} // Use both key and index to ensure uniqueness\n            className=\"widget\"\n            data-grid={{ w: 8, h: 8, x: 0, y: Infinity }}\n          >\n            <Widget\n              id={key}\n              onRemoveItem={onRemoveItem}\n              backgroundColor=\"#867ae9\"\n              ComponentList={componentList[key]}\n            />\n          </div>\n        ))}\n      </ResponsiveGridLayout>\n    </div>\n  );\n};\n\nexport default withSize({ refreshMode: \"debounce\", refreshRate: 60 })(\n  GridStackComponent\n);\n\nfunction getFromLS(key) {\n  let ls = {};\n  if (localStorage) {\n    try {\n      ls = JSON.parse(localStorage.getItem(\"rgl-8\")) || {};\n    } catch (e) {}\n  }\n  return ls[key];\n}\n\nfunction saveToLS(key, value) {\n  if (localStorage) {\n    localStorage.setItem(\n      \"rgl-8\",\n      JSON.stringify({\n        [key]: value,\n      })\n    );\n  }\n}\n","import React, { useState, useEffect } from \"react\";\nimport { Table } from \"antd\";\nimport { getSensorsDataHCCAP } from \"services/sensor\";\nimport \"./ReportTable.css\";\n\nconst ReportTable = ({ date, day }) => {\n  const handleDateChange = (event) => {\n    setSelectedDate(event.target.value);\n  };\n  const [loading, setLoading] = useState(false);\n  const [hccpColumns, setHccpColumns] = useState([]);\n  const [hccpData, setHccpData] = useState([]);\n\n  useEffect(() => {\n    setLoading(true);\n    console.log(date, day);\n    getSensorsDataHCCAP({ date, day })\n      .then((res) => {\n        console.log(\"res\", res);\n        setLoading(false);\n        setHccpData(res.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n      });\n  }, [date, day]);\n\n  const uniqueDates = [\n    ...new Set(\n      hccpData.flatMap((sensor) => sensor.dates.map((date) => date.date))\n    ),\n  ];\n  const uniqueIntervals = [\n    ...new Set(\n      hccpData.flatMap((sensor) =>\n        sensor.dates.flatMap((date) =>\n          date.intervals.map((interval) => interval.interval)\n        )\n      )\n    ),\n  ];\n  return (\n    <>\n      <table>\n        <thead>\n          <tr>\n            <th>Sensor Name</th>\n            {uniqueDates.map((date) => (\n              <th key={date} colSpan={uniqueIntervals.length}>\n                {date}\n              </th>\n            ))}\n          </tr>\n          <tr>\n            <th></th>\n            {uniqueDates.map((date) =>\n              uniqueIntervals.map((interval) => (\n                <th key={`${date}-${interval}`}>{interval}</th>\n              ))\n            )}\n          </tr>\n        </thead>\n        <tbody>\n          {hccpData.map((sensor) => (\n            <tr key={sensor.name}>\n              <td>{sensor.name}</td>\n              {uniqueDates.map((date) =>\n                uniqueIntervals.map((interval) => (\n                  <td key={`${date}-${interval}`}>\n                    {sensor.dates\n                      .find((item) => item.date === date)\n                      ?.intervals.find((item) => item.interval === interval)\n                      ?.value || 0}\n                  </td>\n                ))\n              )}\n            </tr>\n          ))}\n        </tbody>\n      </table>\n      {/* <Table\n        columns={hccpColumns}\n        dataSource={hccpData}\n        bordered\n        size=\"middle\"\n        scroll={{\n          x: \"calc(700px + 50%)\",\n          y: 240,\n        }}\n      /> */}\n    </>\n  );\n};\n\nexport default ReportTable;\n","import React from \"react\";\nimport { Table, Tag } from \"antd\";\nimport \"./NotificationTable.css\";\n\nconst columns = [\n  {\n    title: \"Raised\",\n    dataIndex: \"Raised\",\n    key: \"name\",\n    render: (text) => <a>{text}</a>,\n  },\n  {\n    title: \"Device\",\n    dataIndex: \"Device\",\n    key: \"age\",\n  },\n\n  {\n    title: \"Severity\",\n    key: \"tags\",\n    dataIndex: \"Severity\",\n    render: (_, { Severity }) => (\n      <>\n        {Severity.map((tag) => {\n          let color = tag.length > 5 ? \"geekblue\" : \"green\";\n          if (tag === \"Alram\") {\n            color = \"red\";\n          }\n          return (\n            <Tag color={color} key={tag}>\n              {tag.toUpperCase()}\n            </Tag>\n          );\n        })}\n      </>\n    ),\n  },\n];\nconst data = [\n  {\n    key: \"1\",\n    Raised: \"2023-07-27 12:14\",\n    Device: \"-80 Freezer 9824512\",\n    Severity: [\"Alram\"],\n  },\n  {\n    key: \"2\",\n    Raised: \"2023-07-27 12:14\",\n    Device: \"-80 Freezer 9824512\",\n    Severity: [\"Alram\"],\n  },\n  {\n    key: \"3\",\n    Raised: \"2023-07-27 12:14\",\n    Device: \"-80 Freezer 9824512\",\n    Severity: [\"Alram\"],\n  },\n  {\n    key: \"4\",\n    Raised: \"2023-07-27 12:14\",\n    Device: \"-80 Freezer 9824512\",\n    Severity: [\"Alram\"],\n  },\n  {\n    key: \"5\",\n    Raised: \"2023-07-27 12:14\",\n    Device: \"-80 Freezer 9824512\",\n    Severity: [\"Alram\"],\n  },\n];\n// const [show, setShow] = useState(true);\n\nconst NotificationTable = () => {\n  return (\n    <div>\n      {/* <Badge count={show ? 25 : 0} /> */}\n      <Table columns={columns} dataSource={data} />\n    </div>\n  );\n};\n\nexport default NotificationTable;\n","\"use client\";\n\nimport {\n  Box,\n  Flex,\n  Text,\n  IconButton,\n  Button,\n  Stack,\n  Collapse,\n  Icon,\n  Popover,\n  PopoverTrigger,\n  PopoverContent,\n  useColorModeValue,\n  useBreakpointValue,\n  useDisclosure,\n} from \"@chakra-ui/react\";\nimport {\n  HamburgerIcon,\n  CloseIcon,\n  ChevronDownIcon,\n  ChevronRightIcon,\n} from \"@chakra-ui/icons\";\n\nimport logo from \"../../../../../assets/svg/iot-logo.svg\";\nimport flag from \"../../../../../assets/svg/flag.svg\";\n\nimport \"./Navbar.css\"\n\nimport {\n  HomeOutlined,\n  FolderOutlined,\n  CopyOutlined,\n  MenuOutlined,\n  FullscreenOutlined,\n  SearchOutlined,\n  AppstoreAddOutlined,\n} from \"@ant-design/icons\";\n\nexport default function Navbar() {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Box>\n      <Flex\n        bg={useColorModeValue(\"white\", \"#1a202c\")}\n        color={useColorModeValue(\"gray.600\", \"white\")}\n        minH={\"60px\"}\n        py={{ base: 2 }}\n        px={{ base: 4 }}\n        borderBottom={1}\n        borderStyle={\"solid\"}\n        borderColor={useColorModeValue(\"gray.200\", \"gray.900\")}\n        align={\"center\"}\n      >\n        <Flex\n          flex={{ base: 1, md: \"auto\" }}\n          ml={{ base: -2 }}\n          display={{ base: \"flex\", md: \"none\" }}\n        >\n          <IconButton\n            onClick={onToggle}\n            icon={\n              isOpen ? <CloseIcon w={3} h={3} /> : <HamburgerIcon w={5} h={5} />\n            }\n            variant={\"ghost\"}\n            aria-label={\"Toggle Navigation\"}\n          />\n        </Flex>\n        <Flex flex={{ base: 1 }} justify={{ base: \"center\", md: \"start\" }}>\n          <Text\n            className=\"logo\"\n            textAlign={useBreakpointValue({ base: \"center\", md: \"left\" })}\n            fontFamily={\"heading\"}\n            color={useColorModeValue(\"gray.800\", \"white\")}\n          >\n            SafelinesIOT\n          </Text>\n          {/* <img src={logo} /> */}\n          <Flex display={{ base: \"none\", md: \"flex\" }} ml={10}>\n            <DesktopNav />\n          </Flex>\n        </Flex>\n\n        <Stack\n          flex={{ base: 1, md: 0 }}\n          justify={\"flex-end\"}\n          direction={\"row\"}\n          spacing={6}\n        >\n          <div className=\"header_icons\">\n            <img src={flag} />\n\n            <FullscreenOutlined style={{ fontSize: \"20px\" }} />\n            <SearchOutlined style={{ fontSize: \"20px\" }} />\n\n            <AppstoreAddOutlined style={{ fontSize: \"20px\" }} />\n          </div>\n        </Stack>\n      </Flex>\n\n      <Collapse in={isOpen} animateOpacity>\n        <MobileNav />\n      </Collapse>\n    </Box>\n  );\n}\n\nconst DesktopNav = () => {\n  const linkColor = useColorModeValue(\"gray.600\", \"gray.200\");\n  const linkHoverColor = useColorModeValue(\"gray.800\", \"white\");\n  const popoverContentBgColor = useColorModeValue(\"white\", \"gray.800\");\n\n  return (\n    <Stack direction={\"row\"} spacing={4}>\n      {NAV_ITEMS.map((navItem) => (\n        <Box key={navItem.label}>\n          <Popover trigger={\"hover\"} placement={\"bottom-start\"}>\n            <PopoverTrigger>\n              <Box\n                as=\"a\"\n                p={2}\n                href={navItem.href ?? \"#\"}\n                fontSize={\"md\"}\n                fontWeight={500}\n                color={linkColor}\n                _hover={{\n                  textDecoration: \"none\",\n                  color: linkHoverColor,\n                }}\n              >\n                {navItem.icon} {navItem.label}\n              </Box>\n            </PopoverTrigger>\n\n            {navItem.children && (\n              <PopoverContent\n                border={0}\n                boxShadow={\"xl\"}\n                bg={popoverContentBgColor}\n                p={4}\n                rounded={\"xl\"}\n                minW={\"sm\"}\n              >\n                <Stack>\n                  {navItem.children.map((child) => (\n                    <DesktopSubNav key={child.label} {...child} />\n                  ))}\n                </Stack>\n              </PopoverContent>\n            )}\n          </Popover>\n        </Box>\n      ))}\n    </Stack>\n  );\n};\n\nconst DesktopSubNav = ({ label, href, subLabel, icon }) => {\n  return (\n    <Box\n      as=\"a\"\n      href={href}\n      role={\"group\"}\n      display={\"block\"}\n      p={2}\n      rounded={\"md\"}\n      _hover={{ bg: useColorModeValue(\"pink.50\", \"gray.900\") }}\n    >\n      <Stack direction={\"row\"} align={\"center\"}>\n        <Box>\n          <Text\n            transition={\"all .3s ease\"}\n            _groupHover={{ color: \"pink.400\" }}\n            fontWeight={500}\n          >\n            {label}\n          </Text>\n          <Text fontSize={\"sm\"}>{subLabel}</Text>\n        </Box>\n        <Flex\n          transition={\"all .3s ease\"}\n          transform={\"translateX(-10px)\"}\n          opacity={0}\n          _groupHover={{ opacity: \"100%\", transform: \"translateX(0)\" }}\n          justify={\"flex-end\"}\n          align={\"center\"}\n          flex={1}\n        >\n          <Icon color={\"pink.400\"} w={5} h={5} as={ChevronRightIcon} />\n        </Flex>\n      </Stack>\n    </Box>\n  );\n};\n\nconst MobileNav = () => {\n  return (\n    <Stack\n      bg={useColorModeValue(\"white\", \"gray.800\")}\n      p={4}\n      display={{ md: \"none\" }}\n    >\n      {NAV_ITEMS.map((navItem) => (\n        <MobileNavItem key={navItem.label} {...navItem} />\n      ))}\n    </Stack>\n  );\n};\n\nconst MobileNavItem = ({ label, children, href, icon }) => {\n  const { isOpen, onToggle } = useDisclosure();\n\n  return (\n    <Stack spacing={4} onClick={children && onToggle}>\n      <Box\n        py={2}\n        as=\"a\"\n        href={href ?? \"#\"}\n        justifyContent=\"space-between\"\n        alignItems=\"center\"\n        _hover={{\n          textDecoration: \"none\",\n        }}\n      >\n        <Text\n          fontWeight={600}\n          color={useColorModeValue(\"gray.600\", \"gray.200\")}\n        >\n          {label}\n        </Text>\n        {children && (\n          <Icon\n            as={ChevronDownIcon}\n            transition={\"all .25s ease-in-out\"}\n            transform={isOpen ? \"rotate(180deg)\" : \"\"}\n            w={6}\n            h={6}\n          />\n        )}\n      </Box>\n\n      <Collapse in={isOpen} animateOpacity style={{ marginTop: \"0!important\" }}>\n        <Stack\n          mt={2}\n          pl={4}\n          borderLeft={1}\n          borderStyle={\"solid\"}\n          borderColor={useColorModeValue(\"gray.200\", \"gray.700\")}\n          align={\"start\"}\n        >\n          {children &&\n            children.map((child) => (\n              <Box as=\"a\" key={child.label} py={2} href={child.href}>\n                {child.label}\n              </Box>\n            ))}\n        </Stack>\n      </Collapse>\n    </Stack>\n  );\n};\n\nconst NAV_ITEMS = [\n  {\n    label: \"Dashboard\",\n\n    icon: <HomeOutlined style={{ fontSize: \"16px\" }} />,\n  },\n\n  {\n    label: \"Apps\",\n    href: \"#\",\n    icon: <FolderOutlined style={{ fontSize: \"16px\" }} />,\n  },\n  {\n    label: \"Pages\",\n    href: \"#\",\n    icon: <CopyOutlined style={{ fontSize: \"16px\" }} />,\n  },\n  {\n    label: \"UI\",\n    href: \"#\",\n    icon: <FolderOutlined style={{ fontSize: \"16px\" }} />,\n  },\n  {\n    label: \"Misc\",\n    icon: <MenuOutlined style={{ fontSize: \"16px\" }} />,\n    children: [\n      {\n        label: \"Component 1\",\n        // subLabel: 'Find your dream design job',\n        href: \"#\",\n      },\n      {\n        label: \"Component 2\",\n        // subLabel: 'An exclusive list for contract work',\n        href: \"#\",\n      },\n    ],\n  },\n];\n","import React from \"react\";\nimport { Flex, useColorModeValue, useColorMode } from \"@chakra-ui/react\";\n\nimport \"./status.css\";\nfunction Status({ textColor, bgColor, icon, text, value }) {\n  const { colorMode } = useColorMode();\n  const dynamicBackgroundColor =\n    colorMode === \"light\" ? bgColor : useColorModeValue(\"#fff\", \"#1E293B\");\n\n  const statusCardStyle = {\n    backgroundColor: dynamicBackgroundColor,\n    color: textColor,\n  };\n\n  return (\n    <div className=\"status__card\" style={statusCardStyle}>\n      <div className=\"status\">\n        <h1 className=\"status__count\">{value}</h1>\n        <div className=\"status__name\">\n          <img src={icon} alt=\"status icon\" />\n          <span>{text}</span>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default Status;\n","import React from \"react\";\nimport GaugeChart from \"react-gauge-chart\";\nimport \"./Gauge.css\";\nimport { calculatePercentage } from \"variables/DonutData\";\nconst Gauge = ({ minValue, maxValue, currentValue, }) => {\n  const safeCurrentValue = Math.min(Math.max(currentValue, minValue), maxValue);\n  // const percentage = (currentValue - minValue) / (maxValue - minValue);\n  const percentage = Math.min(\n    Math.max((safeCurrentValue - minValue) / (maxValue - minValue), 0),1);\n  const redToYellow = generateGradientColor(\"#ca0035\", \"#FFD700\", 5);\n  const yellowToGreen = generateGradientColor(\"#FFD700\", \"#2ECC71\", 8);\n  const greenToYellow = [...yellowToGreen].reverse();\n  const yellowToRed = [...redToYellow].reverse();\n  const colorsArray = [\n    ...redToYellow,\n    ...yellowToGreen,\n    ...greenToYellow,\n    ...yellowToRed,\n  ];\n  const getNeedleColor = (percentage, colors) => {\n    const index = Math.min(\n        Math.floor(percentage * colors.length),\n        colors.length - 1\n    );\n    return colors[index];\n  };\n  const needleColor = getNeedleColor(percentage, colorsArray);\n\n  return (\n    <div\n      style={{\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        width: \"100%\",\n      }}\n    >\n      <div>\n        <GaugeChart\n          id=\"gauge-chart2\"\n          nrOfLevels={26}\n          colors={colorsArray}\n          arcWidth={0.3}\n          percent={percentage}\n          needleColor={needleColor}\n          style={{ minHeight: \"150px\", width: \"100%\" }}\n        />\n      </div>\n      <div className=\"text\">\n        <div className=\"Min-Max \">\n          <span>\n            {minValue} <span>&#8451;</span>\n          </span>\n          <span>\n            {currentValue} <span>&#8451;</span>\n          </span>\n          <span>\n            {maxValue} <span>&#8451;</span>\n          </span>\n        </div>\n      </div>\n    </div>\n  );\n};\nfunction generateGradientColor(startColor, endColor, steps) {\n  const stepFactor = 1 / (steps - 1);\n  const interpolatedArray = [];\n  for (let i = 0; i < steps; i++) {\n\n    const interpolatedColor = interpolateColor(startColor, endColor, stepFactor * i);\n    interpolatedArray.push(interpolatedColor);\n  }\n  return interpolatedArray;\n\n}\nfunction interpolateColor(color1, color2, factor) {\n  const r1 = parseInt(color1.substring(1, 3), 16);\n  const g1 = parseInt(color1.substring(3, 5), 16);\n  const b1 = parseInt(color1.substring(5, 7), 16);\n\n  const r2 = parseInt(color2.substring(1, 3), 16);\n  const g2 = parseInt(color2.substring(3, 5), 16);\n  const b2 = parseInt(color2.substring(5, 7), 16);\n\n  const r = Math.round(r1 + (r2 - r1) * factor).toString(16).padStart(2, '0');\n  const g = Math.round(g1 + (g2 - g1) * factor).toString(16).padStart(2, '0');\n  const b = Math.round(b1 + (b2 - b1) * factor).toString(16).padStart(2, '0');\n\n  return `#${r}${g}${b}`;\n}\n\nconst getNeedleColor = (percentage, colors) => {\n  const index = Math.min(\n      Math.floor(percentage * colors.length),\n      colors.length - 1\n  );\n  return colors[index];\n};\n\nexport default Gauge;\n","import { Flex, Box, Text, Divider, useColorModeValue } from \"@chakra-ui/react\";\nimport Card from \"components/Card/Card\";\nimport CardBody from \"components/Card/CardBody\";\nimport DonutChart from \"components/Charts/DonutChart\";\nimport Battery from \"assets/svg/Battery.svg\";\nimport React, { useState, useEffect } from \"react\";\nimport {\n  donutChartDataCharts1,\n  donutChartOptionsCharts1,\n} from \"variables/DonutData\";\nimport \"./donut.css\";\nimport { getTimeDifference } from \"variables/DonutData\";\nimport { Skeleton } from \"antd\";\nimport { useNavigate } from \"react-router-dom\";\nimport Gauge from \"../Gauge/Gauge\";\nimport { getSensorsData } from \"services/sensor\";\nfunction Donut() {\n  const [sensorData, setSensorData] = useState();\n  const [loadingDonut, setLoadingDonut] = useState(false);\n\n  const sensorListing = () => {\n    setLoadingDonut(true);\n    getSensorsData()\n      .then((res) => {\n        setLoadingDonut(false);\n        let data = res?.data?.map((item) => {\n          return {\n            ...item,\n            temperature: Number(item?.temperature?.[0]),\n          };\n        });\n        setSensorData(data);\n      })\n      .catch((err) => {\n        setLoadingDonut(false);\n      });\n  };\n  useEffect(() => {\n    sensorListing();\n    const interval = setInterval(() => {\n      sensorListing();\n    }, 120000);\n\n    return () => clearInterval(interval);\n  }, []);\n  const hour = useColorModeValue(\"#64748B\", \"white\");\n  const batteryColor = useColorModeValue(\"black\", \"white\");\n  const navi = useNavigate();\n  return (\n    <div className=\"card-top\">\n      <Flex flexWrap=\"wrap\" style={{ gap: \"50px\", flexWrap: \"wrap\" }} mb={10}>\n        {loadingDonut ? (\n          <>\n            <Card\n              w={{\n                base: \"100%\",\n                sm: \"100%\",\n                md: \"calc(50% - 10px)\",\n                lg: \"calc(25% - 15px)\",\n              }}\n              backgroundColor={useColorModeValue(\"white\", \"#1E293B\")}\n              cursor={\"pointer\"}\n            >\n              <CardBody w=\"100%\" h=\"100%\">\n                <Skeleton active paragraph={{ rows: 3 }} />\n              </CardBody>\n              <Box className=\"max-min\"></Box>\n              <Divider />\n              <Box className=\"reading-footer\"></Box>\n            </Card>\n            <Card\n              w={{\n                base: \"100%\",\n                sm: \"100%\",\n                md: \"calc(50% - 10px)\",\n                lg: \"calc(25% - 15px)\",\n              }}\n              backgroundColor={useColorModeValue(\"white\", \"#1E293B\")}\n              cursor={\"pointer\"}\n            >\n              <CardBody w=\"100%\" h=\"100%\">\n                <Skeleton active paragraph={{ rows: 3 }} />\n              </CardBody>\n              <Box className=\"max-min\"></Box>\n              <Divider />\n              <Box className=\"reading-footer\"></Box>\n            </Card>\n          </>\n        ) : (\n          sensorData?.map((item, index) => (\n            <Card\n              key={index}\n              w={{\n                base: \"100%\",\n                sm: \"100%\",\n                md: \"calc(50% - 10px)\",\n                lg: \"calc(25% - 15px)\",\n              }}\n              onClick={() => {\n                navi(\n                  `/admin/show-graph?sensorId=${item.sensorId}&sensorName=${item.sensorName}`\n                );\n              }}\n              backgroundColor={useColorModeValue(\"white\", \"#1E293B\")}\n              cursor={\"pointer\"}\n            >\n              <Box className=\"reading-header\">\n                <Text>\n                  {item?.sensorName ? item.sensorName : item.sensorId}\n                </Text>\n              </Box>\n              <CardBody w=\"100%\" h=\"100%\">\n                <Gauge\n                  minValue={item?.minValue}\n                  maxValue={item?.maxValue}\n                  currentValue={isNaN(item?.value) ? 0 : item?.value}\n                />\n              </CardBody>\n              <Box className=\"max-min\">\n                <Flex className=\"min\" direction=\"row\">\n                  <Text className=\"min-heading\">Min</Text>\n                  <Text>{item.minValue}</Text>\n                </Flex>\n                <Flex className=\"max\" direction=\"row\">\n                  <Text className=\"max-heading\">Max</Text>\n                  <Text>{item.maxValue}</Text>\n                </Flex>\n              </Box>\n              <Divider />\n              <Box className=\"reading-footer\">\n                <Text className=\"hours\" color={hour}>\n                  {getTimeDifference(new Date(), item?.readingDateTime)}\n                </Text>\n                <Flex className=\"battery\">\n                  <img\n                    src={Battery}\n                    alt=\"Battery\"\n                    style={{\n                      width: \"20px\",\n                      height: \"20px\",\n                      marginLeft: \"5px\",\n                      // filter:\n                      //   item.batteryValue < 3.5\n                      //     ? \"brightness(0) saturate(100%)\"\n                      //     : \"brightness(0) saturate(0%)\",\n                    }}\n                  />\n                  <Text\n                    style={{ color: item.batteryValue < 3.5 ? \"red\" : \"green\" }}\n                  >\n                    {item.batteryValue}\n                  </Text>\n                </Flex>\n              </Box>\n              {/* <Flex className=\"battery\" align=\"center\">\n                <img src={Battery} alt=\"\" style={{ color: \"#64748b\" }} />\n                <Text className=\"percentage\">{item?.battery}</Text>\n              </Flex> */}\n            </Card>\n          ))\n        )}\n      </Flex>\n    </div>\n  );\n}\n\nexport default Donut;\n","import React, { useEffect } from \"react\";\nimport { DeleteIcon } from \"@chakra-ui/icons\";\nimport { Box, Text, IconButton, Flex, VStack } from \"@chakra-ui/react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\n\n\nconst useStyles = makeStyles({\n  root: {\n    width: \"100%\",\n    height:\"100%\",\n    background: \"white\"\n  },\n  header: {\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: \"0.5rem\",\n  },\n  spacer: {\n    flexGrow: 1,\n  },\n  body: {\n    padding: \"0.5rem\",\n    flexGrow: 1,\n  },\n});\n\nconst widgetNames = {\n  a: \"Charts\",\n  b: \"HACCP Report \",\n  c: \"Notification\",\n  d: \"D\",\n};\nexport default function Widget({ id, onRemoveItem, ComponentList }) {\n   const classes = useStyles();\n  return (\n    <Box\n      borderWidth=\"1px\"\n      borderRadius=\"md\"\n      p={4}\n      boxShadow=\"base\"\n      className={classes.root}\n    >\n      <div spacing={2} align=\"start\" className={classes.header}>\n        <Text fontSize=\"lg\">{widgetNames[id]}</Text>\n        <Flex justify=\"flex-end\" w=\"100%\" className={classes.spacer}>\n          <IconButton\n            aria-label=\"delete\"\n            variant=\"ghost\"\n            colorScheme=\"red\"\n            icon={<DeleteIcon />}\n            onClick={() => onRemoveItem(id)}\n          />\n        </Flex>\n      </div>\n      <ComponentList className={classes.root} />\n      <div className={classes.body} />\n    </Box>\n  );\n}\n","// AddList component\nimport React, { useState } from \"react\";\nimport { Flex, Icon } from \"@chakra-ui/react\";\nimport { HiDocumentReport, HiChartBar, HiBell } from \"react-icons/hi\";\nimport { getSensorsData } from \"services/sensor\";\nimport { Select } from \"@chakra-ui/react\";\nimport {\n  Modal,\n  ModalOverlay,\n  ModalContent,\n  ModalHeader,\n  ModalBody,\n  ModalCloseButton,\n  Button,\n} from \"@chakra-ui/react\";\nconst widgetNames = {\n  a: \"CHARTS\",\n  b: \"HCCP REPORT\",\n  c: \"NOTIFICATION\",\n};\n\nconst widgetIcons = {\n  a: <Icon as={HiDocumentReport} boxSize={7} color=\"black\" />,\n  b: <Icon as={HiChartBar} boxSize={7} color=\"black\" />,\n  c: <Icon as={HiBell} boxSize={7} color=\"black\" />,\n};\nexport default function AddList({ onAddItem }) {\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [inputData, setInputData] = useState({\n    maxValue: \"\",\n    minValue: \"\",\n    temperature: \"\",\n    battery: \"\",\n  });\n  const handleAddWidget = (widgetId) => {\n    onAddItem(widgetId);\n  };\n\n  const handleOpenModal = () => {\n    setIsModalOpen(true);\n  };\n\n  const handleCloseModal = () => {\n    setIsModalOpen(false);\n  };\n  const handleSave = () => {\n    setInputData({\n      maxValue: \"\",\n      minValue: \"\",\n      temperature: \"\",\n      battery: \"\",\n    });\n    handleCloseModal();\n    console.log(\"I am save button\", setInputData);\n  };\n  return (\n    <Flex align=\"center\">\n      <Button\n        key=\"a\"\n        onClick={() => {\n          handleAddWidget(\"a\");\n          // handleOpenModal();\n        }}\n        marginRight={2}\n      >\n        <div className=\"widgetButton\">\n          <div className=\"icon\">{widgetIcons[\"a\"]}</div>\n          {widgetNames[\"a\"]}\n        </div>\n      </Button>\n      <Button key=\"b\" onClick={() => handleAddWidget(\"b\")} marginRight={2}>\n        <div className=\"widgetButton\">\n          <div className=\"icon\">{widgetIcons[\"b\"]}</div>\n          {widgetNames[\"b\"]}\n        </div>\n      </Button>\n      <Button key=\"c\" onClick={() => handleAddWidget(\"c\")} marginRight={2}>\n        <div className=\"widgetButton\">\n          <div className=\"icon\">{widgetIcons[\"c\"]}</div>\n          {widgetNames[\"c\"]}\n        </div>\n      </Button>\n\n      {/* <Modal isOpen={isModalOpen} onClose={handleCloseModal}>\n        <ModalOverlay />\n        <ModalContent>\n          <ModalHeader>Chart Modal</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody>\n            <Select\n              placeholder=\"Select an option\"\n              value={inputData.selectedOption}\n              onChange={(e) =>\n                setInputData({ ...inputData, selectedOption: e.target.value })\n              }\n            >\n              <option value=\"option1\">Option 1</option>\n              <option value=\"option2\">Option 2</option>\n              <option value=\"option3\">Option 3</option>\n            </Select>\n          </ModalBody>\n        </ModalContent>\n      </Modal> */}\n    </Flex>\n  );\n}\n","import React from \"react\";\nimport Card from \"@material-ui/core/Card\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Checkbox, FormControl, Box, Flex, Text, Icon ,IconButton ,Center } from \"@chakra-ui/react\";\n// import IconButton from \"@material-ui/core/IconButton\";\nimport { FaSave } from \"react-icons/fa\";\nimport { CheckIcon } from \"@chakra-ui/icons\";\nimport AddList from \"./AddList.js\";\nimport { SaveFilled } from \"@ant-design/icons\";\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    padding: theme.spacing(1),\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n}));\nexport default function TopBar({\n  onLayoutSave,\n  items,\n  onRemoveItem,\n  onAddItem,\n  originalItems,\n}) {\n  const classes = useStyles();\n  return (\n    <Card className={classes.root}>\n      <AddList\n        items={items}\n        onRemoveItem={onRemoveItem}\n        onAddItem={onAddItem}\n        originalItems={originalItems}\n      />\n      <Box className=\"saveButton\" onClick={onLayoutSave}>\n        <Flex alignItems=\"center\" justifyContent=\"center\">\n          <IconButton\n            marginRight={3}\n            aria-label=\"save\"\n            size=\"xs\" // Set the size of the IconButton to small\n            icon={<Icon as={FaSave} boxSize={4} style={{ color: \"gray\" }} />} // Use FaSave icon with gray color and larger size\n          />\n          <Text>Save</Text>\n        </Flex>\n      </Box>\n    </Card>\n  );\n}\n","import React, { useState } from \"react\";\nimport \"react-grid-layout/css/styles.css\";\nimport \"react-resizable/css/styles.css\";\nimport \"./GridStack.css\";\nimport { Box, Text, IconButton, Button, Flex, VStack } from \"@chakra-ui/react\";\nimport { Responsive as ResponsiveGridLayout } from \"react-grid-layout\";\nimport { withSize } from \"react-sizeme\";\nimport { FaFileAlt, FaChartBar, FaBell } from \"react-icons/fa\";\nimport ReportTable from \"../ReportTable/ReportTable\";\nimport Donut from \"../DonutCharts/Donut\";\nimport Widget from \"./Widget\";\nimport TopBar from \"./Topbar\";\nimport NotificationTable from \"../NotificationTable/NotificationTable\";\nimport { Switch } from \"@chakra-ui/react\";\nimport { FaPencilAlt } from \"react-icons/fa\";\nconst GridStackComponent = ({ size: { width }, isOn }) => {\n  const originalItems = [\"a\", \"b\", \"c\"];\n\n  const initialLayouts = {\n    lg: [\n      { i: \"a\", x: 0, y: 0, w: 1, h: 2 },\n      { i: \"b\", x: 1, y: 0, w: 3, h: 2 },\n      { i: \"c\", x: 4, y: 0, w: 1, h: 2 },\n      { i: \"d\", x: 0, y: 2, w: 2, h: 2 },\n    ],\n  };\n\n  const componentList = {\n    a: Donut,\n    b: ReportTable,\n    c: NotificationTable,\n    d: Donut,\n  };\n  const [items, setItems] = useState(originalItems);\n  const [layouts, setLayouts] = useState(\n    getFromLS(\"layouts\") || initialLayouts\n  );\n  const onLayoutChange = (_, allLayouts) => {\n    setLayouts(allLayouts);\n  };\n  const onLayoutSave = () => {\n    saveToLS(\"layouts\", layouts);\n  };\n  const onRemoveItem = (itemId) => {\n    setItems(items.filter((i) => i !== itemId));\n  };\n  const onAddItem = (itemId) => {\n    setItems([...items, itemId]);\n  };\n  const onAddDynamicItem = () => {\n    const newItemId = `dynamic-${Math.random()}`;\n    setItems([...items, newItemId]);\n    setLayouts((prevLayouts) => ({\n      ...prevLayouts,\n      lg: [\n        ...prevLayouts.lg,\n        { i: newItemId, x: 0, y: 0, w: 2, h: 4 }, // You can adjust these values\n      ],\n    }));\n  };\n  const onAddComponent = () => {\n    const newLayout = {\n      i: Date.now().toString(), // Generate a unique ID for the new component\n      x: 0,\n      y: Infinity, // Puts the component at the bottom\n      w: 2,\n      h: 4,\n    };\n\n    setLayouts((prevLayouts) => [...prevLayouts, newLayout]);\n  };\n  return (\n    <div>\n      <Flex alignItems={\"center\"}>\n        <div className=\"editWidgets\">\n          {isOn && (\n            <>\n              <TopBar\n                onLayoutSave={onLayoutSave}\n                items={items}\n                onRemoveItem={onRemoveItem}\n                onAddItem={onAddItem}\n                originalItems={originalItems}\n              />\n            </>\n          )}\n        </div>\n      </Flex>\n      <ResponsiveGridLayout\n        className=\"layout\"\n        layouts={layouts}\n        breakpoints={{ lg: 1200, md: 996, sm: 768, xs: 480, xxs: 0 }}\n        cols={{ lg: 12, md: 10, sm: 6, xs: 4, xxs: 2 }}\n        rowHeight={60}\n        width={width}\n        onLayoutChange={onLayoutChange}\n      >\n        {items.map((key, index) => (\n          <div\n            key={`${key}-${index}`} // Use both key and index to ensure uniqueness\n            className=\"widget\"\n            data-grid={{ w: 8, h: 8, x: 0, y: Infinity }}\n          >\n            <Widget\n              id={key}\n              onRemoveItem={onRemoveItem}\n              backgroundColor=\"#867ae9\"\n              ComponentList={componentList[key]}\n            />\n          </div>\n        ))}\n      </ResponsiveGridLayout>\n    </div>\n  );\n};\n\nexport default withSize({ refreshMode: \"debounce\", refreshRate: 60 })(\n  GridStackComponent\n);\n\nfunction getFromLS(key) {\n  let ls = {};\n  if (localStorage) {\n    try {\n      ls = JSON.parse(localStorage.getItem(\"rgl-8\")) || {};\n    } catch (e) {}\n  }\n  return ls[key];\n}\n\nfunction saveToLS(key, value) {\n  if (localStorage) {\n    localStorage.setItem(\n      \"rgl-8\",\n      JSON.stringify({\n        [key]: value,\n      })\n    );\n  }\n}\n","import { HomeIcon } from \"components/Icons/Icons\";\nimport GraphPage from \"views/Pages/GraphPage\";\nimport ManDashboard from \"views/Pages/ManDashboard\";\nimport ManDash from \"views/Pages/ManDashboarddd\";\n\n\n\n\nconst dashRoutes = [\n  {\n    name: \"Dashboard\",\n    role: 1,\n    // secondaryNavbar: true,\n    path: \"\",\n    component: ManDash,\n    layout: \"/admin\",\n    icon: <HomeIcon color=\"inherit\" />,\n  },\n  {\n    name: \"Dashboardv2\",\n    role: 1,\n    // secondaryNavbar: true,\n    path: \"/v2\",\n    component: ManDashboard,\n    layout: \"/admin\",\n    icon: <HomeIcon color=\"inherit\" />,\n  },\n  {\n    name: \"Graph\",\n    role: 1,\n    // secondaryNavbar: true,\n    path: \"/admin/show-graph\",\n    component: GraphPage,\n    layout: \"/admin\",\n    icon: <HomeIcon color=\"inherit\" />,\n  },\n];\n\nexport default dashRoutes;\n","import {\n  Button,\n  Flex,\n  useColorMode,\n  useColorModeValue,\n  Switch,\n  ButtonGroup,\n  Box,\n  Text,\n} from \"@chakra-ui/react\";\n\nimport React, { useEffect, useState } from \"react\";\nimport ReportTable from \"./components/ReportTable/ReportTable\";\nimport NotificationTable from \"./components/NotificationTable/NotificationTable\";\nimport { SettingsIcon } from \"@chakra-ui/icons\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport \"./index.css\";\nimport Status from \"./components/Status/Status\";\nimport signal from \"../../../assets/svg/signal.svg\";\nimport alarm from \"../../../assets/svg/alarm.svg\";\nimport tick from \"../../../assets/svg/tick.svg\";\nimport warning from \"../../../assets/svg/warning.svg\";\nimport Vaccine from \"./components/Vaccine/Vaccine\";\nimport Footer from \"./components/Footer/Footer\";\nimport BlueGraph from \"./components/BlueGraph/BlueGraph\";\nimport Graph from \"./components/Graph/Graph\";\nimport Donut from \"./components/DonutCharts/Donut\";\nimport { getSensorsData } from \"services/sensor\";\nimport { ConfigProvider, theme, Card } from \"antd\";\nimport { getSensorsDataHCCAP } from \"services/sensor\";\nimport { getSensorDataById } from \"services/sensor\";\nimport Gauge from \"./components/Gauge/Gauge\";\nimport GridStackComponent from \"./components/GridStack/GridStackComponent\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { FaPencilAlt } from \"react-icons/fa\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport { Select } from \"@chakra-ui/react\";\nimport { useSearchParams } from \"react-router-dom\";\nexport default function ManDash() {\n  // Arslan's code for dark theme\n  const { defaultAlgorithm, darkAlgorithm } = theme;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  const handleClick = () => {\n    setIsDarkMode((previousValue) => !previousValue);\n  };\n  const handleChange = (date) => {\n    setStartDate(date);\n    const utcStartDate = date.toISOString();\n\n    const sensorId = location?.search?.split(\"&\")[0].split(\"=\")[1];\n    const sensorName = location?.search?.split(\"&\")[1]?.split(\"=\")[1];\n    const decodedSensorName = decodeURIComponent(sensorName);\n    const sensorToUse =\n      decodedSensorName === \"undefined\" ? sensorId : decodedSensorName;\n  };\n  var themeClassName =\n    localStorage.getItem(\"themeColor\") === \"dark\" ? \"darkTheme\" : \"lightTheme\";\n  const [Day, setDay] = useState(1);\n  const [isOn, setIsOn] = useState(false);\n  const iconTeal = useColorModeValue(\"teal.500\", \"teal.500\");\n  const iconBoxInside = useColorModeValue(\"white\", \"white\");\n  const textColor = useColorModeValue(\"gray.700\", \"white\");\n  const { colorMode, toggleColorMode } = useColorMode(\"light\");\n  const conditionsTextColor = useColorModeValue(\"#64748b\", \"white\");\n  const [startDate, setStartDate] = useState(new Date());\n  // const setSearchParams = (params) => {\n  //   const url = new URL(window.location.href);\n  //   for (const key in params) {\n  //     if (params.hasOwnProperty(key)) {\n  //       url.searchParams.set(key, params[key]);\n  //     }\n  //   }\n  //   window.history.replaceState(\"\", url);\n  // };\n  // setSearchParams({ systemId: \"0\", themeColor: \"light\" });\n  const setSearchParams = (params) => {\n    const url = new URL(window.location.href);\n    for (const key in params) {\n      if (params.hasOwnProperty(key)) {\n        url.searchParams.set(key, params[key]);\n        localStorage.setItem(key, params[key]);\n      }\n    }\n    window.history.replaceState(\"\", url);\n  };\n  useEffect(() => {\n    setSearchParams({ systemId: \"0\", themeColor: \"light\" });\n    const urlParams = new URLSearchParams(window.location.search);\n\n    if (urlParams.toString() === \"\") {\n      localStorage.removeItem(\"chakra-ui-color-mode\");\n    } else {\n      for (const key of urlParams.keys()) {\n        const value = urlParams.get(key);\n        localStorage.setItem(key, value);\n      }\n    }\n  }, [setSearchParams]);\n  useEffect(() => {\n    let sensorId = location?.search?.split(\"&\")[0].split(\"=\")[1];\n    let sensorName = location?.search?.split(\"&\")[1]?.split(\"=\")[1];\n    sensorName = decodeURIComponent(sensorName);\n\n    const utcstartDate = startDate.toISOString();\n  }, []);\n  useEffect(() => {\n    const urlParams = new URLSearchParams(window.location.search);\n    const themeColor = urlParams.get(\"themeColor\");\n    if (themeColor === \"dark\" && colorMode === \"light\") {\n      toggleColorMode();\n    } else if (themeColor === \"light\" && colorMode === \"dark\") {\n      toggleColorMode();\n    }\n  }, [colorMode, toggleColorMode]);\n  const bgColor = useColorModeValue(\"#F1F5F9\", \"\");\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n  };\n  return (\n    <>\n      {/* <Navbar /> */}\n      <div style={{ backgroundColor: bgColor }}>\n        <Flex flexDirection=\"column\" p={{ base: \"10px\", md: \"20px\" }}>\n          <div className=\"summary__section\">\n            <div className=\"conditions__summery\">\n              <h2 style={{ color: conditionsTextColor }}>Conditions summary</h2>\n              <p style={{ color: conditionsTextColor }}>\n                Keep track of your Sensor status\n              </p>\n            </div>\n            <div className=\"mode__settings\">\n              {/* <div>\n              <Switch\n                size=\"md\"\n                onChange={() => {\n                  toggleColorMode();\n                  handleClick();\n                }}\n              />{\" \"}\n              <span className=\"mode\">\n                Toggle {colorMode === \"light\" ? \"Dark\" : \"Light\"}\n              </span>\n            </div>  */}\n              {/* <div className=\"edit\">\n              <Switch\n                isChecked={isOn}\n                onChange={() => setIsOn(!isOn)}\n                colorScheme={isOn ? \"blue\" : \"gray\"}\n              />\n              <Text color=\"black\">Edit</Text>\n              <Box color=\"blue.700\" marginTop=\"3px\" fontSize=\"15px\">\n                <FaPencilAlt />\n              </Box>\n            </div> */}\n              {/* <div>\n              <Button\n                leftIcon={<SettingsIcon />}\n                colorScheme=\"blue\"\n                variant=\"outline\"\n              >\n                Settings\n              </Button>\n            </div> */}\n            </div>\n          </div>\n          <div className=\"Overview\">\n            <p>Overview</p>\n            {/* <div className=\"gridLayout\">\n            <GridStackComponent isOn={isOn} setIsOn={setIsOn} />\n          </div> */}\n            <div className=\"Overview__card\">\n              <Status\n                bgColor=\"#EEFFFC\"\n                textColor=\"#3182CE\"\n                icon={signal}\n                value=\"22\"\n                text={\"Offline\"}\n              />\n              <Status\n                bgColor=\"#FDF8F0\"\n                textColor=\"#F47B00\"\n                icon={alarm}\n                value=\"05\"\n                text={\"Alarm\"}\n              />\n              <Status\n                bgColor=\"#FDF0F0\"\n                textColor=\"#EF4444\"\n                icon={warning}\n                value=\"23\"\n                text={\"Warning\"}\n              />\n              <Status\n                bgColor=\"#F3FFEE\"\n                textColor=\"#22C55E\"\n                icon={tick}\n                value=\"6\"\n                text={\"Okay\"}\n              />\n            </div>\n          </div>\n          {/* \n        <div className=\"Vaccine\">\n          <Vaccine />\n          <Vaccine />\n          <Vaccine />\n          <Vaccine />\n        </div> */}\n          <div>\n            <Donut />\n            {/* <Graph /> */}\n          </div>\n          <div>\n            <ConfigProvider\n              theme={{\n                algorithm: isDarkMode ? darkAlgorithm : defaultAlgorithm,\n              }}\n            >\n              <Card\n                className={`reportTable ${themeClassName}`}\n                style={{ marginBottom: \"2rem\" }}\n              >\n                <h3>HACCP Report</h3>\n                {/* <p>15/08/2023 - 15/08/2023</p> */}\n                <form className=\"\" onSubmit={onFormSubmit}>\n                  <div className=\"form-group form\">\n                    <div className=\"Custom-Date\">\n                      <label htmlFor=\"datePicker \">Select a Date</label>\n                      <DatePicker\n                        selected={startDate}\n                        onChange={handleChange}\n                        name=\"startDate\"\n                        dateFormat=\"MM/dd/yyyy\"\n                        placeholderText=\"Select a date\"\n                      />\n                    </div>\n                    <div className=\"Custom-Date\">\n                      <label htmlFor=\"datePicker \">Select No of Days</label>\n                      <Select\n                        variant=\"outline\"\n                        onChange={(e) => {\n                          setDay(e.target.value);\n                        }}\n                      >\n                        <option value={1}>1</option>\n                        <option value={2}>2</option>\n                        <option value={3}>3</option>\n                        <option value={4}>4</option>\n                        <option value={5}>5</option>\n                      </Select>\n                    </div>\n                  </div>\n                </form>\n                <ReportTable date={startDate} day={Day} />\n              </Card>\n              {/* <Card className={`NotificationTable ${themeClassName}`}>\n                <h3>Notification</h3>\n                <p> 5 alerts</p>\n                <NotificationTable />\n                <Button className=\"rounded\" variant=\"outline\">\n                  See all Notifications\n                </Button>\n              </Card> */}\n            </ConfigProvider>\n          </div>\n        </Flex>\n        {/* <Footer /> */}\n      </div>\n    </>\n  );\n}\n","\nimport {\n  Button,\n  Flex,\n  useColorMode,\n  useColorModeValue,\n  Switch,\n  ButtonGroup,\n  Box,\n  Text,\n} from \"@chakra-ui/react\";\n\nimport React, { useEffect, useState } from \"react\";\n\nimport ReportTable from \"./components/ReportTable/ReportTable\";\nimport NotificationTable from \"./components/NotificationTable/NotificationTable\";\n\nimport { SettingsIcon } from \"@chakra-ui/icons\";\nimport Navbar from \"./components/Navbar/Navbar\";\nimport \"./index.css\";\nimport Status from \"./components/Status/Status\";\nimport signal from \"../../../assets/svg/signal.svg\";\nimport alarm from \"../../../assets/svg/alarm.svg\";\nimport tick from \"../../../assets/svg/tick.svg\";\nimport warning from \"../../../assets/svg/warning.svg\";\nimport Vaccine from \"./components/Vaccine/Vaccine\";\nimport Footer from \"./components/Footer/Footer\";\nimport BlueGraph from \"./components/BlueGraph/BlueGraph\";\nimport Graph from \"./components/Graph/Graph\";\nimport Donut from \"./components/DonutCharts/Donut\";\nimport { getSensorsData } from \"services/sensor\";\nimport { ConfigProvider, theme, Card } from \"antd\";\nimport { getSensorsDataHCCAP } from \"services/sensor\";\nimport { getSensorDataById } from \"services/sensor\";\nimport Gauge from \"./components/Gauge/Gauge\";\nimport GridStackComponent from \"./components/GridStack/GridStackComponent\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport { ChakraProvider } from \"@chakra-ui/react\";\nimport { FaPencilAlt } from \"react-icons/fa\";\n\nexport default function Default() {\n  // Arslan's code for dark theme\n  const { defaultAlgorithm, darkAlgorithm } = theme;\n  const [isDarkMode, setIsDarkMode] = useState(false);\n\n  const handleClick = () => {\n    setIsDarkMode((previousValue) => !previousValue);\n  };\n\n  const [isOn, setIsOn] = useState(false);\n\n  const iconTeal = useColorModeValue(\"teal.500\", \"teal.500\");\n  const iconBoxInside = useColorModeValue(\"white\", \"white\");\n  const textColor = useColorModeValue(\"gray.700\", \"white\");\n  const { colorMode, toggleColorMode } = useColorMode(\"light\");\n  const conditionsTextColor = useColorModeValue(\"#64748b\", \"white\");\n\n  return (\n    <>\n      {/* <Navbar /> */}\n      <Flex flexDirection=\"column\" p={{ base: \"10px\", md: \"20px\" }}>\n        <div className=\"summary__section\">\n          <div className=\"conditions__summery\">\n            <h2 style={{ color: conditionsTextColor }}>Conditions summary</h2>\n            <p style={{ color: conditionsTextColor }}>\n              Keep track of your Sensor status\n            </p>\n          </div>\n          <div className=\"mode__settings\">\n            <div>\n              <Switch\n                size=\"md\"\n                onChange={() => {\n                  toggleColorMode();\n                  handleClick();\n                }}\n              />{\" \"}\n              <span className=\"mode\">\n                Toggle {colorMode === \"light\" ? \"Dark\" : \"Light\"}\n              </span>\n            </div>\n            <div className=\"edit\">\n              <Switch\n                isChecked={isOn}\n                onChange={() => setIsOn(!isOn)}\n                colorScheme={isOn ? \"blue\" : \"gray\"}\n              />\n              <Text color=\"black\">Edit</Text>\n              <Box color=\"blue.700\" marginTop=\"3px\" fontSize=\"15px\">\n                <FaPencilAlt />\n              </Box>\n            </div>\n            <div>\n              <Button\n                leftIcon={<SettingsIcon />}\n                colorScheme=\"blue\"\n                variant=\"outline\"\n              >\n                Settings\n              </Button>\n            </div>\n          </div>\n        </div>\n        <div className=\"Overview\">\n          <p>Overview</p>\n          <div className=\"gridLayout\">\n            <GridStackComponent isOn={isOn} setIsOn={setIsOn} />\n          </div>\n          {/* <div className=\"Overview__card\">\n            <Status\n              bgColor=\"#EEFFFC\"\n              textColor=\"#3182CE\"\n              icon={signal}\n              value=\"22\"\n              text={\"Offline\"}\n            />\n            <Status\n              bgColor=\"#FDF8F0\"\n              textColor=\"#F47B00\"\n              icon={alarm}\n              value=\"05\"\n              text={\"Alarm\"}\n            />\n            <Status\n              bgColor=\"#FDF0F0\"\n              textColor=\"#EF4444\"\n              icon={warning}\n              value=\"23\"\n              text={\"Warning\"}\n            />\n            <Status\n              bgColor=\"#F3FFEE\"\n              textColor=\"#22C55E\"\n              icon={tick}\n              value=\"6\"\n              text={\"Okay\"}\n            />\n          </div> */}\n        </div>\n        {/* \n        <div className=\"Vaccine\">\n          <Vaccine />\n          <Vaccine />\n          <Vaccine />\n          <Vaccine />\n        </div> */}\n        {/* <div>\n          <Donut\n            data={sensorData}\n            setSensorDataID={setSensorID}\n            sensorID={sensorID}\n            loading={loadingDonut}\n          /> */}\n        {/* <Graph /> */}\n        {/* </div> */}\n        {/* <div>\n          <ConfigProvider\n            theme={{\n              algorithm: isDarkMode ? darkAlgorithm : defaultAlgorithm,\n            }}\n          >\n            <Card className=\"reportTable\" style={{ marginBottom: \"2rem\" }}>\n              <h3>HACCP Report</h3>\n              <p>15/08/2023 - 15/08/2023</p>\n              <ReportTable\n                hccpData={hccpData}\n                hccpColumns={hccpColumns}\n                loading={loading}\n              />\n            </Card>\n            <Card className=\"NotificationTable\">\n              <h3>Notification</h3>\n              <p> 5 alerts</p>\n              <NotificationTable />\n              <Button className=\"rounded\" variant=\"outline\">\n                See all Notifications\n              </Button>\n            </Card>\n          </ConfigProvider>\n        </div> */}\n      </Flex>\n      <Footer />\n    </>\n  );\n}\n","import React, { useEffect, useState } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport Navbar from \"../ManDashboard/components/Navbar/Navbar\";\nimport Footer from \"../ManDashboard/components/Footer/Footer\";\nimport { getSensorDataById } from \"services/sensor\";\n\nimport BlueGraph from \"../ManDashboard/components/BlueGraph/BlueGraph\";\nimport { Button, Flex } from \"@chakra-ui/react\";\nimport { useNavigate } from \"react-router-dom\";\nimport DatePicker from \"react-datepicker\";\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./index.css\";\nimport { FaCalendar } from \"react-icons/fa\";\nexport default function GraphPage({}) {\n  const [startDate, setStartDate] = useState(new Date());\n  const [endDate, setEndDate] = useState(new Date());\n   const CustomInput = ({ value, onClick }) => (\n     <div className=\"custom-input\">\n       <input\n         type=\"text\"\n         value={value}\n         onClick={onClick}\n         placeholder=\"Select a date\"\n       />\n       <FaCalendar onClick={onClick} className=\"calendar-icon\" />\n     </div>\n   );\n  const onFormSubmit = (e) => {\n    e.preventDefault();\n  };\n  const location = useLocation();\n  const navi = useNavigate();\n  const [sensorData, setSensorsData] = useState();\n  const [loading, setLoading] = useState(true);\n  const [isSensorId, setIsSensorId] = useState();\n  useEffect(() => {\n    let sensorId = location?.search?.split(\"&\")[0].split(\"=\")[1];\n    let sensorName = location?.search?.split(\"&\")[1]?.split(\"=\")[1];\n    sensorName = decodeURIComponent(sensorName);\n    if (sensorName == \"undefined\") {\n      sensorName = sensorId;\n    }\n    setIsSensorId(sensorName);\n    setLoading(true);\n    const utcstartDate = startDate.toISOString();\n     const utcEndDate = endDate.toISOString();\n    getSensorDataById(sensorId, sensorName, utcstartDate ,utcEndDate)\n      .then((res) => {\n        setLoading(false);\n        setSensorsData(res?.data);\n      })\n      .catch((err) => {\n        setLoading(false);\n        console.error(err);\n      });\n  }, [startDate, endDate]);\n\n  const handleButtonClick = () => {\n    const storedSystemId = localStorage.getItem(\"systemId\");\n    const storedThemeColor = localStorage.getItem(\"themeColor\");\n    const params = new URLSearchParams();\n    params.set(\"systemId\", storedSystemId);\n    params.set(\"themeColor\", storedThemeColor);\n    navi(`/?${params.toString()}`);\n  };\n\n  return (\n    <div>\n      <Flex flexDirection=\"column\" p={{ base: \"10px\", md: \"20px\" }}>\n        <Button w=\"20\" onClick={handleButtonClick}>\n          Back\n        </Button>\n        <form onSubmit={onFormSubmit}>\n          <div className=\"form-group\">\n            <div className=\"DatePicker\">\n              <div>\n                <div>\n                  <p style={{ fontWeight: \"bold\" }}>Select a Start Date</p>\n                </div>\n                <DatePicker\n                  selected={startDate}\n                  onChange={(date) => setStartDate(date)}\n                  name=\"startDate\"\n                  dateFormat=\"MM/dd/yyyy\"\n                  placeholderText=\"Select start date\"\n                  customInput={<CustomInput />}\n                />\n              </div>\n              <div>\n                <div>\n                  <p style={{ fontWeight: \"bold\" }}>Select a End Date</p>\n                </div>\n                <DatePicker\n                  selected={endDate}\n                  onChange={(date) => setEndDate(date)}\n                  name=\"endDate\"\n                  dateFormat=\"MM/dd/yyyy\"\n                  placeholderText=\"Select end date\"\n                  customInput={<CustomInput />}\n                />\n              </div>\n            </div>\n          </div>\n        </form>\n        <div>\n          <BlueGraph\n            sensorId={isSensorId}\n            sensorsData={sensorData}\n            loading={loading}\n          />\n        </div>\n      </Flex>\n    </div>\n  );\n}\n","import { mode } from \"@chakra-ui/theme-tools\";\n\nexport const globalStyles = {\n  colors: {\n    gray: {\n      700: \"#1f2733\",\n    },\n    teal: {\n      500: \"#E2E8F0\",\n    },\n  },\n  styles: {\n    global: (props) => ({\n      body: {\n        bg:\n          document.documentElement.layout === \"auth\"\n            ? mode(\"black\", \"red\")(props)\n            : mode(\"black\", \"red\")(props),\n        fontFamily: \"'Roboto', sans-serif\",\n      },\n      html: {\n        fontFamily: \"'Roboto', sans-serif\",\n      },\n    }),\n  },\n};\n","\n\n// 1. Import the utilities\nimport { createBreakpoints } from \"@chakra-ui/theme-tools\";\n// 2. Update the breakpoints as key-value pairs\nexport const breakpoints = createBreakpoints({\n  sm: \"320px\",\n  md: \"768px\",\n  lg: \"960px\",\n  xl: \"1200px\",\n  \"2xl\": \"1600px\",\n});\n","\n\nexport const buttonStyles = {\n  components: {\n    Button: {\n      // 3. We can add a new visual variant\n      variants: {\n        \"with-shadow\": {\n          boxShadow: \"0 0 2px 2px #efdfde\",\n        },\n        \"no-hover\": {\n          _hover: {\n            boxShadow: \"none\",\n          },\n        },\n        \"transparent-with-icon\": {\n          bg: \"transparent\",\n          fontWeight: \"bold\",\n          borderRadius: \"inherit\",\n          cursor: \"pointer\",\n          _hover: \"none\",\n          _active: {\n            bg: \"transparent\",\n            transform: \"none\",\n            borderColor: \"transparent\",\n          },\n          _focus: {\n            boxShadow: \"none\",\n          },\n          _hover: {\n            boxShadow: \"none\",\n          },\n        },\n      },\n      baseStyle: {\n        borderRadius: \"12px\",\n        _focus: {\n          boxShadow: \"none\",\n        },\n      },\n    },\n  },\n};\n","const Card = {\n  baseStyle: {\n    p: \"22px\",\n    display: \"flex\",\n    flexDirection: \"column\",\n    width: \"100%\",\n    position: \"relative\",\n    minWidth: \"0px\",\n    wordWrap: \"break-word\",\n    backgroundClip: \"border-box\",\n  },\n  variants: {\n    panel: (props) => ({\n      bg: \"white\",\n      width: \"100%\",\n      boxShadow: \"0px 3.5px 5.5px rgba(0, 0, 0, 0.02)\",\n      borderRadius: \"15px\",\n    }),\n  },\n  defaultProps: {\n    variant: \"panel\",\n  },\n};\n\nexport const CardComponent = {\n  components: {\n    Card,\n  },\n};\n","\n\nconst CardBody = {\n  baseStyle: {\n    display: \"flex\",\n    width: \"100%\",\n  },\n};\n\nexport const CardBodyComponent = {\n  components: {\n    CardBody,\n  },\n};\n","\n\nconst CardFooter = {\n  baseStyle: {\n    display: \"flex\",\n    width: \"100%\",\n  },\n};\n\nexport const CardFooterComponent = {\n  components: {\n    CardFooter,\n  },\n};\n","\n\nconst CardHeader = {\n  baseStyle: {\n    display: \"flex\",\n    width: \"100%\",\n  },\n};\n\nexport const CardHeaderComponent = {\n  components: {\n    CardHeader,\n  },\n};\n","import { useColorMode } from \"@chakra-ui/react\";\n\nconst MainPanel = {\n  baseStyle: (props) => {\n    const { colorMode } = useColorMode();\n    const isDarkMode = colorMode === \"dark\";\n    const bgColor = isDarkMode ? \"gray.800\" : \"teal.500\";\n    const textColor = isDarkMode ? \"#fff\" : \"inherit\";\n\n    return {\n      float: \"right\",\n      maxWidth: \"100%\",\n      position: \"relative\",\n      height: \"100%\",\n      transition: \"all 0.33s cubic-bezier(0.685, 0.0473, 0.346, 1)\",\n      transitionDuration: \".2s, .2s, .35s\",\n      transitionProperty: \"top, bottom, width\",\n      transitionTimingFunction: \"linear, linear, ease\",\n      bg: bgColor,\n      color: textColor,\n    };\n  },\n  variants: {\n    main: {\n      float: \"right\",\n    },\n    rtl: {\n      float: \"left\",\n    },\n  },\n  defaultProps: {\n    variant: \"main\",\n  },\n};\n\nexport const MainPanelComponent = {\n  components: {\n    MainPanel,\n  },\n};\n","\n\nconst PanelContent = {\n  baseStyle: {\n    ms: \"auto\",\n    me: \"auto\",\n    ps: \"15px\",\n    pe: \"15px\",\n  },\n};\n\nexport const PanelContentComponent = {\n  components: {\n    PanelContent,\n  },\n};\n","\n\nconst PanelContainer = {\n  baseStyle: {\n    padding: \"30px 15px\",\n    minHeight: \"calc(100vh - 123px)\",\n  },\n};\n\nexport const PanelContainerComponent = {\n  components: {\n    PanelContainer,\n  },\n};\n","\n\nimport { extendTheme } from '@chakra-ui/react';\nimport { globalStyles } from './styles';\nimport { breakpoints } from './foundations/breakpoints';\nimport { buttonStyles } from './components/button';\nimport { badgeStyles } from './components/badge';\nimport { linkStyles } from './components/link';\nimport { drawerStyles } from './components/drawer';\nimport { CardComponent } from './additions/card/Card';\nimport { CardBodyComponent } from './additions/card/CardBody';\nimport { CardFooterComponent } from './additions/card/CardFooter';\nimport { CardHeaderComponent } from './additions/card/CardHeader';\nimport { MainPanelComponent } from './additions/layout/MainPanel';\nimport { PanelContentComponent } from './additions/layout/PanelContent';\nimport { PanelContainerComponent } from './additions/layout/PanelContainer';\n// import { mode } from \"@chakra-ui/theme-tools\";\nexport default extendTheme(\n\t{ breakpoints }, // Breakpoints\n\tglobalStyles,\n\tbuttonStyles, // Button styles\n\tbadgeStyles, // Badge styles\n\tlinkStyles, // Link styles\n\tdrawerStyles, // Sidebar variant for Chakra's drawer\n\tCardComponent, // Card component\n\tCardBodyComponent, // Card Body component\n\tCardFooterComponent, // Card Footer component\n\tCardHeaderComponent, // Card Header component\n\tMainPanelComponent, // Main Panel component\n\tPanelContentComponent, // Panel Content component\n\tPanelContainerComponent // Panel Container component\n);\n","\n\nexport const badgeStyles = {\n  components: {\n    Badge: {\n      sizes: {\n        md: {\n          width: \"65px\",\n          height: \"25px\",\n        },\n      },\n      baseStyle: {\n        textTransform: \"capitalize\",\n      },\n    },\n  },\n};\n","\n\nexport const linkStyles = {\n  components: {\n    Link: {\n      // 3. We can add a new visual variant\n      decoration: \"none\",\n      baseStyle: {\n        _hover: {\n          textDecoration: \"none\",\n        },\n        _focus: {\n          boxShadow: \"none\",\n        },\n      },\n    },\n  },\n};\n","\n\nexport const drawerStyles = {\n  components: {\n    Drawer: {\n      // 3. We can add a new visual variant\n      variants: {\n        \"with-shadow\": {\n          placement: \"right\",\n          boxShadow: \"0 0 2px 2px #efdfde\",\n          bgColor: \"red\",\n        },\n      },\n    },\n  },\n};\n","\n\n// Chakra imports\nimport { Box } from \"@chakra-ui/react\";\n// prop-types is a library for typechecking of props\n// import PropTypes from \"prop-types\";\nimport { useEffect, useRef } from \"react\";\n// threejs components\nimport * as THREE from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\n\nfunction Globe({ canvasStyle, ...rest }) {\n  const globeRef = useRef(null);\n  const canvasRef = useRef(null);\n\n  useEffect(() => {\n    function createGlobe() {\n      const container = globeRef.current;\n      const canvas = canvasRef.current;\n\n      const globeRadius = 100;\n      const globeWidth = 4098 / 2;\n      const globeHeight = 1968 / 2;\n\n      function convertFlatCoordsToSphereCoords(x, y) {\n        let latitude = ((x - globeWidth) / globeWidth) * -180;\n        let longitude = ((y - globeHeight) / globeHeight) * -90;\n        latitude = (latitude * Math.PI) / 180;\n        longitude = (longitude * Math.PI) / 180;\n        const radius = Math.cos(longitude) * globeRadius;\n\n        return {\n          x: Math.cos(latitude) * radius,\n          y: Math.sin(longitude) * globeRadius,\n          z: Math.sin(latitude) * radius,\n        };\n      }\n\n      function makeMagic(points) {\n        const { width, height } = container.getBoundingClientRect();\n\n        // 1. Setup scene\n        const scene = new THREE.Scene();\n        // 2. Setup camera\n        const camera = new THREE.PerspectiveCamera(45, width / height);\n        // 3. Setup renderer\n        const renderer = new THREE.WebGLRenderer({\n          canvas,\n          antialias: true,\n        });\n        renderer.setSize(width, height);\n        // 4. Add points to canvas\n        // - Single geometry to contain all points.\n        const mergedGeometry = new THREE.Geometry();\n        // - Material that the dots will be made of.\n        const pointGeometry = new THREE.SphereGeometry(0.5, 1, 1);\n        const pointMaterial = new THREE.MeshBasicMaterial({\n          color: \"#989db5\",\n        });\n\n        // eslint-disable-next-line no-restricted-syntax\n        for (const point of points) {\n          const { x, y, z } = convertFlatCoordsToSphereCoords(\n            point.x,\n            point.y,\n            width,\n            height\n          );\n\n          if (x && y && z) {\n            pointGeometry.translate(x, y, z);\n            mergedGeometry.merge(pointGeometry);\n            pointGeometry.translate(-x, -y, -z);\n          }\n        }\n\n        const globeShape = new THREE.Mesh(mergedGeometry, pointMaterial);\n        scene.add(globeShape);\n\n        container.classList.add(\"peekaboo\");\n\n        // Setup orbital controls\n        camera.orbitControls = new OrbitControls(camera, canvas);\n        camera.orbitControls.enableKeys = false;\n        camera.orbitControls.enablePan = false;\n        camera.orbitControls.enableZoom = false;\n        camera.orbitControls.enableDamping = false;\n        camera.orbitControls.enableRotate = true;\n        camera.orbitControls.autoRotate = true;\n        camera.position.z = -265;\n\n        function animate() {\n          // orbitControls.autoRotate is enabled so orbitControls.update\n          // must be called inside animation loop.\n          camera.orbitControls.update();\n          requestAnimationFrame(animate);\n          renderer.render(scene, camera);\n        }\n        animate();\n      }\n\n      function hasWebGL() {\n        const gl =\n          canvas.getContext(\"webgl\") || canvas.getContext(\"experimental-webgl\");\n        if (gl && gl instanceof WebGLRenderingContext) {\n          return true;\n        }\n        return false;\n      }\n\n      function init() {\n        if (hasWebGL()) {\n          window\n            .fetch(\n              \"https://raw.githubusercontent.com/creativetimofficial/public-assets/master/soft-ui-dashboard-pro/assets/js/points.json\"\n            )\n            .then((response) => response.json())\n            .then((data) => {\n              makeMagic(data.points);\n            });\n        }\n      }\n      init();\n    }\n\n    createGlobe();\n  }, []);\n\n  return (\n    <Box ref={globeRef} {...rest}>\n      <canvas\n        ref={canvasRef}\n        width=\"700\"\n        height=\"600\"\n        style={{ outline: \"none\", ...canvasStyle }}\n      />\n    </Box>\n  );\n}\n\n// Setting default values for the props for Globe\nGlobe.defaultProps = {\n  canvasStyle: {},\n};\n\n// Typechecking props for the Globe\n// Globe.propTypes = {\n//   canvasStyle: PropTypes.objectOf(PropTypes.any),\n// };\n\nexport default Globe;\n","import { Box, useStyleConfig } from \"@chakra-ui/react\";\nfunction MainPanel(props) {\n  const { variant, children, ...rest } = props;\n  const styles = useStyleConfig(\"MainPanel\", { variant });\n  return (\n    <Box __css={styles} {...rest}>\n      {children}\n    </Box>\n  );\n}\n\nexport default MainPanel;\n","import { Box, useStyleConfig } from \"@chakra-ui/react\";\nfunction PanelContainer(props) {\n  const { variant, children, ...rest } = props;\n  const styles = useStyleConfig(\"PanelContainer\", { variant });\n  return (\n    <Box __css={styles} {...rest}>\n      {children}\n    </Box>\n  );\n}\n\nexport default PanelContainer;\n","\n\nimport { Box, useStyleConfig } from \"@chakra-ui/react\";\nfunction PanelContent(props) {\n  const { variant, children, ...rest } = props;\n  const styles = useStyleConfig(\"PanelContent\", { variant });\n  return (\n    <Box __css={styles} {...rest}>\n      {children}\n    </Box>\n  );\n}\n\nexport default PanelContent;\n","export default __webpack_public_path__ + \"static/media/avatar1.eeef2af6.png\";","export default __webpack_public_path__ + \"static/media/avatar2.5692c39d.png\";","export default __webpack_public_path__ + \"static/media/avatar3.9f646ac5.png\";","import { ChakraProvider, Portal, useDisclosure } from \"@chakra-ui/react\";\nimport \"assets/css/pud-dashboard-styles.css\";\n// import Configurator from \"components/Configurator/Configurator\";\n// import FixedPlugin from \"components/FixedPlugin/FixedPlugin\";\n// import Footer from \"components/Footer/Footer.js\";\n// Custom components\nimport MainPanel from \"components/Layout/MainPanel\";\nimport PanelContainer from \"components/Layout/PanelContainer\";\nimport PanelContent from \"components/Layout/PanelContent\";\n// Layout components\nimport AdminNavbar from \"components/Navbars/AdminNavbar.js\";\nimport Sidebar from \"components/Sidebar/Sidebar.js\";\nimport { SidebarContext } from \"contexts/SidebarContext\";\nimport React, { useState } from \"react\";\nimport \"react-quill/dist/quill.snow.css\"; // ES6\nimport { Navigate, Route, Routes, useNavigate } from \"react-router-dom\";\nimport routes from \"routes.js\";\nimport \"@fontsource/roboto/400.css\";\nimport \"@fontsource/roboto/500.css\";\nimport \"@fontsource/roboto/700.css\";\n// Custom Chakra theme\nimport theme from \"theme/theme.js\";\nimport { useEffect } from \"react\";\nimport Configurator from \"components/Configurator/Configurator\";\nexport default function Dashboard(props) {\n  const { ...rest } = props;\n  const [sidebarVariant, setSidebarVariant] = useState(\"transparent\");\n  const [fixed, setFixed] = useState(false);\n  const [toggleSidebar, setToggleSidebar] = useState(false);\n  const [sidebarWidth, setSidebarWidth] = useState(275);\n  const navigate = useNavigate();\n  const mainPanel = React.createRef();\n  const getRoute = () => {\n    return window.location.pathname !== \"/admin/full-screen-maps\";\n  };\n\n  const getActiveRoute = (routes) => {\n    let activeRoute = \"Default Brand Text\";\n    for (let i = 0; i < routes.length; i++) {\n      if (routes[i].collapse) {\n        let collapseActiveRoute = getActiveRoute(routes[i].items);\n        if (collapseActiveRoute !== activeRoute) {\n          return collapseActiveRoute;\n        }\n      } else if (routes[i].category) {\n        let categoryActiveRoute = getActiveRoute(routes[i].items);\n        if (categoryActiveRoute !== activeRoute) {\n          return categoryActiveRoute;\n        }\n      } else {\n        if (window.location.href.indexOf(routes[i].path) !== -1) {\n          return routes[i].name;\n        }\n      }\n    }\n    return activeRoute;\n  };\n  const getActiveNavbar = (routes) => {\n    let activeNavbar = false;\n    for (let i = 0; i < routes.length; i++) {\n      if (routes[i].collapse) {\n        let collapseActiveNavbar = getActiveNavbar(routes[i].items);\n        if (collapseActiveNavbar !== activeNavbar) {\n          return collapseActiveNavbar;\n        }\n      } else if (routes[i].category) {\n        let categoryActiveNavbar = getActiveNavbar(routes[i].items);\n        if (categoryActiveNavbar !== activeNavbar) {\n          return categoryActiveNavbar;\n        }\n      } else {\n        if (window.location.href.indexOf(routes[i].path) !== -1) {\n          return routes[i].secondaryNavbar;\n        }\n      }\n    }\n    return activeNavbar;\n  };\n  const getRoutes = (routes) => {\n    return routes.map((prop, key) => {\n      let data = localStorage.getItem(\"authData\")\n        ? JSON.parse(localStorage.getItem(\"authData\"))\n        : {};\n      if (prop.layout === \"/admin\") {\n        return (\n          prop.role == data?.role_id && (\n            <Route path={prop.path} element={<prop.component />} key={key} />\n          )\n        );\n      }\n      if (prop.collapse) {\n        return getRoutes(prop.items);\n      }\n      if (prop.category) {\n        return getRoutes(prop.items);\n      }\n    });\n  };\n\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  document.documentElement.dir = \"ltr\";\n  document.documentElement.layout = \"admin\";\n  // Chakra Color Mode\n  return (\n    <ChakraProvider theme={theme} resetCss={false} overflow=\"scroll\">\n      <SidebarContext.Provider\n        value={{\n          sidebarWidth,\n          setSidebarWidth,\n          toggleSidebar,\n          setToggleSidebar,\n        }}\n      >\n        {/* <Sidebar\n          routes={routes}\n          logoText={\"PERURI\"}\n          display=\"none\"\n          sidebarVariant={sidebarVariant}\n          {...rest}\n        /> */}\n        <MainPanel\n          ref={mainPanel}\n          w={{\n            base: \"100%\",\n            xl: `100%`,\n          }}\n        >\n          {/* <Portal> */}\n          {/* <AdminNavbar\n              onOpen={onOpen}\n              logoText={\"PERURI\"}\n              brandText={getActiveRoute(routes)}\n              secondary={getActiveNavbar(routes)}\n              fixed={fixed}\n              {...rest}\n            /> */}\n          {/* </Portal> */}\n\n          {getRoute() ? (\n            <PanelContent>\n              <PanelContainer>\n                <Routes>\n                  {getRoutes(routes)}\n                  {/* <Navigate to='/admin/dashboard/default' /> */}\n                </Routes>\n              </PanelContainer>\n            </PanelContent>\n          ) : null}\n          {/* <Footer /> */}\n          {/* <Portal>\n            <FixedPlugin fixed={fixed} onOpen={onOpen} />\n          </Portal> */}\n          {/* <Configurator\n            secondary={getActiveNavbar(routes)}\n            isOpen={true}\n            onClose={onClose}\n            isChecked={fixed}\n            onSwitch={(value) => {\n              setFixed(value);\n            }}\n            onOpaque={() => setSidebarVariant(\"opaque\")}\n            onTransparent={() => setSidebarVariant(\"transparent\")}\n          /> */}\n        </MainPanel>\n      </SidebarContext.Provider>\n    </ChakraProvider>\n  );\n}\n","import React, { useEffect } from \"react\";\nimport {\n  BrowserRouter as Router,\n  HashRouter,\n  Route,\n  Routes,\n  Navigate,\n  useRoutes,\n  Outlet,\n} from \"react-router-dom\";\n\nimport AuthLayout from \"layouts/Auth.js\";\nimport AdminLayout from \"layouts/Admin.js\";\nimport { lazy, Suspense } from \"react\";\nimport SignIn from \"views/track/signin\";\n// import SignUp from \"views/Authentication/SignUp/SignUpBasic\";\n\nconst AppRouter = () => {\n  // const routes = useRoutes();\n  useEffect(() => {\n    localStorage.setItem(\n      \"authData\",\n      JSON.stringify({ token: \"123123123\", name: \"hearar\", role_id: 1 })\n    );\n  }, []);\n  return (\n    <Routes>\n      {/* <Route path={`/register`} element={<SignUp />} /> */}\n      {/* <Route exact path=\"/\" element={<SignIn />} />\n      <Route path={`/auth/*`} element={<AuthLayout />} />\n      <Route path={`/login`} element={<SignIn />} /> */}\n      <Route path={`/*`} element={<AdminLayout />} />\n      <Route element={<>404 No Page Found</>} />\n      {/* <Navigate to='/auth/login' /> */}\n    </Routes>\n  );\n};\nexport default AppRouter;\n","import React from \"react\";\nimport AppRouter from \"./app\";\nimport { BrowserRouter } from \"react-router-dom\";\nimport { DndProvider } from \"react-dnd\";\nimport { HTML5Backend } from \"react-dnd-html5-backend\";\nimport ReactDOM from \"react-dom\";\nrequire(\"dotenv\").config();\nReactDOM.render(\n  <BrowserRouter>\n    <DndProvider backend={HTML5Backend}>\n      <AppRouter />\n    </DndProvider>\n  </BrowserRouter>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}